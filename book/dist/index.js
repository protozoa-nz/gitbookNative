export default {"README.md":"<h1 id=\"ssb-handbook-hermes-the-hermit-crab-assets-hermes-png-\">ssb handbook <img src=\"assets/hermes.png\" alt=\"Hermes the hermit crab\"></h1>\n<p>A work-in-progress guide to the ssb-verse and key concepts and influences</p>\n<h2 id=\"what-is-scuttlebutt-\">What Is Scuttlebutt?</h2>\n<p>Historically, sea-slang for gossip - a scuttlebutt is basically a watercooler on a ship.</p>\n<p>Scuttlebutt is a decent(ralised) secure gossip platform.</p>\n<blockquote>\n<p>This seems like a silly name, but I assure you, this is real science. Read this: <a href=\"http://www.cs.cornell.edu/home/rvr/papers/flowgossip.pdf\">http://www.cs.cornell.edu/home/rvr/papers/flowgossip.pdf</a></p>\n<p>Or, if you&#39;re lazy: <a href=\"http://en.wikipedia.org/wiki/Scuttlebutt\">http://en.wikipedia.org/wiki/Scuttlebutt</a> (laziness will get you nowhere, btw)</p>\n</blockquote>\n<h2 id=\"how-to-get-started\">How To Get Started</h2>\n<p>The easiest way to get started is using <a href=\"https://github.com/ssbc/patchwork\">patchwork</a>, a classic social networking <a href=\"./applications.md\">application</a>.</p>\n<p><img src=\"./assets/patchwork.jpg\" alt=\"screenshot of patchwork\"></p>\n<h2 id=\"install-patchwork\">Install Patchwork</h2>\n<h3 id=\"download-installers-for-windows-macos-and-linux\">Download Installers for Windows, macOS and Linux</h3>\n<p>See <a href=\"https://github.com/ssbc/patchwork/releases\">patchwork/releases</a></p>\n<h3 id=\"or-build-from-source\">Or Build from Source</h3>\n<p>With <a href=\"https://github.com/creationix/nvm\">node (&gt;= 4) and npm (&gt;= 2) installed</a>:</p>\n<pre><code class=\"lang-shell\">$ git clone https://github.com/ssbc/patchwork\n$ cd patchwork\n$ npm install\n$ npm start\n</code></pre>\n<p>On Linux you&#39;ll need some more dependencies. On Debian:</p>\n<pre><code class=\"lang-shell\">sudo apt-get install libxext-dev libxtst-dev libxkbfile-dev g++ m4 automake libtool\n</code></pre>\n<h3 id=\"be-invited-to-a-pub\">Be Invited To A Pub</h3>\n<p>In order to gossip outside your local network, you&#39;ll need to connect to a <a href=\"./concepts/pub.md\">Pub</a>.</p>\n<p>You can find an invite to an available pub at the <a href=\"https://github.com/ssbc/scuttlebot/wiki/Pub-Servers\">Pub servers registry</a>.</p>\n<p>Get an invite, then in <code>patchwork</code>: click &quot;+ Join Pub&quot; and paste the invite code.</p>\n<p>This will cause you to follow the Pub and vise versa. If you haven&#39;t synchronized to this social network yet, prepare to wait a few minutes while your local server synchronizes.</p>\n<h2 id=\"join-the-community\">Join The Community</h2>\n<ul>\n<li><strong>#new-people</strong>: introduce yourself</li>\n<li><strong>#faq</strong>: first impressions, what is confusing as a new user?</li>\n<li><strong>#patchwork</strong>: report bugs, suggestions, etc</li>\n<li><strong>#scuttlebutt</strong>: protocol related discussion</li>\n</ul>\n<h2 id=\"about-this-handbook\">About This Handbook</h2>\n<p>To view the public handbook, browse to <a href=\"https://www.scuttlebutt.nz\">scuttlebutt.nz</a></p>\n<p>The handbook is organized by topics:</p>\n<ul>\n<li><a href=\"contributing.md\">Contributing</a></li>\n<li><a href=\"talks.md\">Talks</a></li>\n<li><a href=\"applications.md\">Applications</a></li>\n<li><a href=\"principles.md\">Principles</a></li>\n<li><a href=\"faq/index.md\">FAQ</a></li>\n<li><a href=\"stories/index.md\">Stories</a></li>\n<li><a href=\"modules.md\">Modules</a></li>\n<li><a href=\"concepts/index.md\">Concepts</a></li>\n<li><a href=\"guides/index.md\">Guides</a></li>\n<li><a href=\"glossary.md\">Glossary</a></li>\n</ul>\n<h2 id=\"other-documentation\">Other documentation</h2>\n<p>Over time we have scattered documentation around in a few places:</p>\n<ul>\n<li><a href=\"https://scuttlebot.io\">scuttlebot.io</a></li>\n<li><a href=\"https://ssbc.github.io\">ssbc.github.io</a></li>\n</ul>\n<p><a href=\"contributing.md#contributing-documentation\">Please help us consolidate this here</a>!</p>\n<h2 id=\"other-projects\">Other Projects</h2>\n<p>Scuttlebutt is not the only dex project:</p>\n<ul>\n<li><a href=\"http://matrix.org/\">Matrix</a></li>\n<li><a href=\"https://bitcoin.org/\">Bitcoin</a></li>\n<li><a href=\"https://www.ethereum.org/\">Ethereum</a></li>\n<li><a href=\"http://zerocoin.org/\">Zerocoin</a></li>\n<li><a href=\"http://maidsafe.net/\">MaidSafe</a></li>\n<li><a href=\"https://ipfs.io/\">IPFS</a></li>\n<li><a href=\"http://datproject.org/\">Dat</a></li>\n<li><a href=\"https://github.com/solid/solid\">Solid</a></li>\n<li><a href=\"https://github.com/cjdelisle/cjdns\">cjdns</a></li>\n<li><a href=\"https://syncthing.net/\">Syncthing</a></li>\n<li><a href=\"https://ind.ie/\">Indie</a></li>\n<li><a href=\"http://twister.net.co/\">Twister</a></li>\n<li><a href=\"https://webtorrent.io/\">WebTorrent</a></li>\n<li><a href=\"https://github.com/btrask/stronglink\">StrongLink</a></li>\n<li><a href=\"http://retroshare.sourceforge.net\">RetroShare</a></li>\n<li><a href=\"http://zeronet.io\">ZeroNet</a></li>\n</ul>\n","SUMMARY.md":"<ul>\n<li><a href=\"README.md\">Introduction</a></li>\n<li><a href=\"contributing.md\">Contributing</a></li>\n<li><a href=\"talks.md\">Talks</a></li>\n<li><a href=\"applications.md\">Applications</a></li>\n<li><a href=\"principles.md\">Principles</a></li>\n<li><a href=\"faq/index.md\">FAQ</a></li>\n<li><a href=\"faq/basics/basics.md\">Basics</a><ul>\n<li><a href=\"faq/basics/patchwork-vs-scuttlebutt.md\">What is the difference between Patchwork and Scuttlebutt?</a></li>\n<li><a href=\"faq/basics/pub.md\">What is a pub?</a></li>\n<li><a href=\"faq/basics/multiple-pubs.md\">Should I follow multiple pubs?</a></li>\n<li><a href=\"faq/basics/gossip.md\">What do you mean SSB works through gossip?</a></li>\n<li><a href=\"faq/basics/data-live.md\">Where does all my data live?</a></li>\n<li><a href=\"faq/basics/size.md\">How much space will scuttlebutt take up?</a></li>\n<li><a href=\"faq/basics/delete.md\">What happens if I delete everything?</a> <ul>\n<li><a href=\"faq/applications/applications.md\">Applications</a></li>\n</ul>\n</li>\n<li><a href=\"faq/applications/patchwork-and-patchbay.md\">How do posts work across apps?</a></li>\n<li><a href=\"faq/applications/moving-ssb-apps.md\">Can I switch apps easily?</a></li>\n<li><a href=\"faq/applications/multiple-devices.md\">Can I post  from different devices?</a></li>\n<li><a href=\"faq/applications/patchwork-markup.md\">Is there a markdown guide for Patchwork?</a><ul>\n<li><a href=\"faq/channels/channels-index.md\">Channels</a></li>\n</ul>\n</li>\n<li><a href=\"faq/channels/channels.md\">What are channels?</a></li>\n<li><a href=\"faq/channels/channel-sort.md\">Are Channels sorted in any order?</a></li>\n<li><a href=\"faq/channels/channel-messages.md\">How do channel descriptions work?</a></li>\n<li><a href=\"faq/channels/channel-find.md\">How do I find a channel?</a><ul>\n<li><a href=\"faq/misc/concepts.md\">Misc.</a></li>\n</ul>\n</li>\n<li><a href=\"faq/misc/cool.md\">This seems really cool?</a></li>\n<li><a href=\"faq/misc/faq-credits.md\">Who wrote this FAQ?</a></li>\n<li><a href=\"faq/misc/help.md\">How can I help?</a></li>\n</ul>\n</li>\n<li><a href=\"stories/index.md\">Stories</a><ul>\n<li><a href=\"stories/design-challenge-avoid-centralization-and-singletons.md\">Design Challenge: Avoid Centralization and Singletons</a></li>\n<li><a href=\"stories/design-challenge-sybil-attacks.md\">Design Challenge: Sybil Attacks</a></li>\n<li><a href=\"stories/gossiping-securely-is-the-new-email.md\">Gossiping Securely is the new Email</a></li>\n<li><a href=\"stories/scuttlebutt-genesis.md\">Scuttlebutt Genesis</a></li>\n<li><a href=\"stories/using-trust-in-open-networks.md\">Using Trust in Open Networks</a></li>\n</ul>\n</li>\n<li><a href=\"modules.md\">Modules</a></li>\n<li><a href=\"concepts/index.md\">Concepts</a><ul>\n<li><a href=\"concepts/identity.md\">Identity</a></li>\n<li><a href=\"concepts/stream.md\">Stream</a></li>\n<li><a href=\"concepts/feed.md\">Feed</a></li>\n<li><a href=\"concepts/message.md\">Message</a></li>\n<li><a href=\"concepts/private-message.md\">Private Message</a></li>\n<li><a href=\"concepts/link.md\">Link</a></li>\n<li><a href=\"concepts/gossip.md\">Gossip</a></li>\n<li><a href=\"concepts/local.md\">Local</a></li>\n<li><a href=\"concepts/consensus.md\">Consensus</a></li>\n<li><a href=\"concepts/pub.md\">Pub</a></li>\n<li><a href=\"concepts/blob.md\">Blob</a></li>\n<li><a href=\"concepts/cap.md\">Cap</a></li>\n</ul>\n</li>\n<li><a href=\"guides/index.md\">Guides</a><ul>\n<li><a href=\"guides/cli-first-steps.md\">First steps with sbot, a command line tool for Scuttlebutt</a></li>\n</ul>\n</li>\n<li><a href=\"glossary.md\">Glossary</a></li>\n</ul>\n","applications.md":"<h1 id=\"scuttlebutt-apps\">Scuttlebutt Apps</h1>\n<p>The following is an overview of the known Secure Scuttlebutt-based apps.\nPlease feel free to extend and modify this registry.</p>\n<hr>\n<h2 id=\"patchwork\">Patchwork</h2>\n<p>A remake of <a href=\"https://github.com/ssbc/patchwork-classic\">Patchwork Classic</a> using <a href=\"https://github.com/ssbc/patchcore\">patchcore</a> and UX/ideas from <a href=\"https://github.com/mmckegg/ferment\">ferment</a>.</p>\n<p>The goal is to make a standalone, easy to install, &quot;social&quot; view into the ssb world.</p>\n<p><img src=\"./assets/patchwork.jpg\" alt=\"patchwork\"></p>\n<p>Links : <a href=\"https://git-ssb.celehner.com/%25bfG9dyXtlic9umNzgwYuG8nhjG0ycUrlBROprvyBZaU%3D.sha256\">git-ssb</a> | <a href=\"https://github.com/ssbc/patchwork\">github</a></p>\n<p>SSB : ssb://%bfG9dyXtlic9umNzgwYuG8nhjG0ycUrlBROprvyBZaU=.sha256</p>\n<hr>\n<h2 id=\"ferment\">Ferment</h2>\n<p>A music sharing app for musicians, remixers, creatores, Built using ssb + webtorrent</p>\n<p><img src=\"./assets/ferment.png\" alt=\"ferment\"></p>\n<p>Tour : <a href=\"https://www.youtube.com/watch?v=xgvxXbWYmrI\">youtube</a></p>\n<p>Links : <a href=\"https://git-ssb.celehner.com/%25t3XQv5Gk%2FdzJQM1fWFnMlaTlTvmtd3BHYCTIzhT%2F7G8%3D.sha256\">git-ssb</a> | <a href=\"https://github.com/mmckegg/ferment\">github</a></p>\n<p>SSB : ssb://%t3XQv5Gk/dzJQM1fWFnMlaTlTvmtd3BHYCTIzhT/7G8=.sha256</p>\n<hr>\n<h2 id=\"git-ssb\">Git-ssb</h2>\n<p>A totally decent git interface.</p>\n<p><img src=\"./assets/git-ssb-index.png\" alt=\"git-ssb-index\">\nNews about projects of friends, or people you follow.</p>\n<p><img src=\"./assets/git-ssb-repo.png\" alt=\"git-ssb-repo\">\nFamiliar interface for raising issues, forking, opening pull requests.</p>\n<p>Known online portals serving git-ssb over http: </p>\n<ul>\n<li><a href=\"https://gitmx.com\">https://gitmx.com</a></li>\n<li><a href=\"https://git-ssb.celehner.com\">https://git-ssb.celehner.com</a></li>\n<li><a href=\"http://git.mixmix.io\">http://git.mixmix.io</a></li>\n</ul>\n<p>Links : <a href=\"https://git-ssb.celehner.com/%25n92DiQh7ietE%2BR%2BX%2FI403LQoyf2DtR3WQfCkDKlheQU%3D.sha256\">git-ssb</a> | <a href=\"https://github.com/clehner/git-ssb\">github</a></p>\n<p>SSB : ssb://%n92DiQh7ietE+R+X/I403LQoyf2DtR3WQfCkDKlheQU=.sha256 </p>\n<hr>\n<h2 id=\"ssb-graphviz\">ssb-graphviz</h2>\n<p>An interactive visualisation of your local scuttleverse.\nFly with [w,a,s,d] and look with [up,left,down,right].\nHover over nodes to see who they are and light up their 1st and (dimmer) 2nd degree friendships.</p>\n<p><img src=\"./assets/graph-viz.png\" alt=\"ssb-graphviz\"></p>\n<p>SSB : ssb://%hNm67sfnZFtWkD/+1qxH3UfzhXykfpKtOL1C/XbLANA=.sha256</p>\n<hr>\n<h2 id=\"ssb-stats\">SSB stats</h2>\n<p>Posts published over time (from the perspective of Cel&#39;s pub server). Colors represent when that user first posted (so is a way of visualising cohorts).</p>\n<p><img src=\"./assets/ssb-stats.png\" alt=\"ssb-stats\"></p>\n<p>Links : <a href=\"https://celehner.com/ssbc/stats/daily.html\">celehner</a></p>\n<hr>\n<h2 id=\"patchwork-classic\">Patchwork-Classic</h2>\n<p>The first major messaging interface built on SSB, using React. Currently has installers for Mac and Linux, and translations.</p>\n<p><img src=\"./assets/patchwork-classic.png\" alt=\"patchwork-classic\"></p>\n<p>Tour (old version) : <a href=\"https://www.youtube.com/watch?v=vmQUfZMCVJ0\">youtube</a></p>\n<p>Links : <a href=\"https://github.com/ssbc/patchwork-classic-electron\">github</a></p>\n<hr>\n<h2 id=\"easy-ssb-pub\">easy-ssb-pub</h2>\n<p><img src=\"https://github.com/staltz/easy-ssb-pub/raw/master/screenshot.png\" alt=\"\"> </p>\n<p><a href=\"https://github.com/staltz/easy-ssb-pub\">https://github.com/staltz/easy-ssb-pub</a></p>\n","contributing.md":"<h1 id=\"contributing\">Contributing</h1>\n<p>This project is open commons that anyone can improve.</p>\n<p>We welcome all contributions, such as but not limited to:</p>\n<ul>\n<li>code<ul>\n<li>bug reporting</li>\n<li>features</li>\n<li>tests</li>\n<li>peer review</li>\n<li>protocol design</li>\n</ul>\n</li>\n<li>operations<ul>\n<li>pub server hosting</li>\n</ul>\n</li>\n<li>design<ul>\n<li>project artwork</li>\n<li>user testing</li>\n<li>newbie first impressions</li>\n<li>real-world use cases</li>\n</ul>\n</li>\n<li>storytelling<ul>\n<li>blogs</li>\n<li>talks</li>\n<li>documentation</li>\n</ul>\n</li>\n<li>facilitation<ul>\n<li>community organizing (meetups)</li>\n<li>group collaboration</li>\n<li>conflict resolution</li>\n</ul>\n</li>\n</ul>\n<p>If you contribute enough, you&#39;ll be invited to join the <a href=\"https://github.com/ssbc\">project members</a>.</p>\n<p>We aim for autonomous solving of collaborative problems with a common vision.</p>\n<h2 id=\"hosting-a-pub-server-concepts-pub-md-\">Hosting a <a href=\"concepts/pub.md\">Pub server</a></h2>\n<p>The easiest way to start hosting a <a href=\"concepts/pub.md\">Pub server</a> is to use <a href=\"https://github.com/staltz/easy-ssb-pub\"><code>easy-ssb-pub</code></a>.</p>\n<p>Or, follow the <a href=\"http://scuttlebot.io/docs/config/create-a-pub.html\">&quot;Create a Pub&quot; guide at scuttlebot.io</a>.</p>\n<h2 id=\"contributing-code\">Contributing Code</h2>\n<p>To understand what code is in the Scuttlebutt ecosystem and how the modules assemble together, see <a href=\"modules.md\">the &quot;Modules&quot; page</a>.</p>\n<p>To get started developing <a href=\"https://github.com/ssbc/patchwork\">Patchwork</a> (the primary user interface), first <a href=\"https://github.com/ssbc/patchwork/blob/master/README.md#or-build-from-source\">follow the instructions to build from source</a>.</p>\n<p>To get started developing <a href=\"https://github.com/ssbc/scuttlebot\">Scuttlebot</a> (the data server), see the <a href=\"https://ssbc.github.io/docs/scuttlebot/tutorial.html\">&quot;Introduction to Using Scuttlebot&quot; guide</a>.</p>\n<h3 id=\"native-build-dependencies\">Native Build Dependencies</h3>\n<p>The main build dependecies are <code>libsodium</code> and <code>leveldb</code>.</p>\n<p>They should be automatically built using a C++ compiler on <code>npm install</code> as we use <a href=\"https://github.com/dominictarr/chloride\">chloride</a> and <a href=\"https://github.com/Level/level\">level</a>, respectively.</p>\n<h3 id=\"tests\">Tests</h3>\n<p>If contributing to a low-level module, please include tests.</p>\n<h3 id=\"code-style\">Code Style</h3>\n<p>The default recommended code style is <a href=\"https://standardjs.com/\">standard</a>.</p>\n<p>If existing code is in another style, <a href=\"https://groups.google.com/forum/#!msg/nodejs/MWaivVTirPY/0pnRjKsggkIJ\">please respect the code style</a>. :)</p>\n<h3 id=\"licenses\">Licenses</h3>\n<p>Most code is licensed under a permissive license (MIT / ISC), while other code like Patchwork is licensed under a copyleft license (GPL / AGPL).</p>\n<h2 id=\"contributing-documentation\">Contributing Documentation</h2>\n<p>While over time we have scattered documentation around:</p>\n<ul>\n<li><a href=\"https://scuttlebot.io\">scuttlebot.io</a></li>\n<li><a href=\"https://ssbc.github.io\">ssbc.github.io</a></li>\n</ul>\n<p>Our intention is to combine these sources and have this handbook (<a href=\"https://github.com/ssbc/ssb-handbook\"><code>ssb-handbook</code></a>) be the new location for all documentation relating to Scuttlebutt.</p>\n<p>You can clone, build, and serve this handbook with <code>gitbook</code> locally.</p>\n<p>The <code>SUMMARY.md</code> is the manifest on which the compiled gitbook is based. Edit that if you want content in/out of the book.</p>\n<h3 id=\"contributing-with-git-ssb-\">Contributing With <code>git-ssb</code></h3>\n<p>To use the public portal for the handbook code, browse to <a href=\"https://git.scuttlebot.io/%25lJsDWwnF4bDxHWYuSjw%2FbW37xg%2BsaF8WtPZYZsefKj0%3D.sha256\">https://git.scuttlebot.io/%25lJsDWwnF4bDxHWYuSjw%2FbW37xg%2BsaF8WtPZYZsefKj0%3D.sha256</a>.</p>\n<p>To use your local scuttlebot server to clone the handbook code:</p>\n<pre><code class=\"lang-bash\">npm install git-ssb -g\ngit clone ssb://%lJsDWwnF4bDxHWYuSjw/bW37xg+saF8WtPZYZsefKj0=.sha256 ssb-handbook\n\ncd ssb-handbook\nnpm install\nnpm start\n</code></pre>\n<p>To contribute to the handbook code, make a pull request with</p>\n<pre><code>git ssb pull-request\n</code></pre><h3 id=\"contributing-with-github\">Contributing with GitHub</h3>\n<p>Our public GitHub repository is at <a href=\"https://github.com/ssbc/ssb-handbook\">ssbc/ssb-handbook</a></p>\n<p>Feel free to make an issue or pull request here if you see something that needs doing.</p>\n","glossary.md":"<h1 id=\"scuttlebutt-glossary\">Scuttlebutt glossary</h1>\n<h2 id=\"decent\">decent</h2>\n<p>short for &quot;decentralized&quot;</p>\n<blockquote>\n<p>let&#39;s get more friends on decent(tralised) communications</p>\n</blockquote>\n<ul>\n<li>%tQ/GQ/AynIWvPSeRe8a81ET0d45b1mep1F4BHw8aCkQ=.sha256</li>\n</ul>\n<blockquote>\n<p>be decent</p>\n</blockquote>\n<ul>\n<li><a href=\"https://github.com/evbogue/decent\">evbogue/decent</a></li>\n</ul>\n<h2 id=\"dex\">dex</h2>\n<p>short for &quot;decentralized&quot;</p>\n<p>see also: <a href=\"#uxer\">uxer</a></p>\n<h2 id=\"runcible\">runcible</h2>\n<blockquote>\n<p>I have decided that runcible means &quot;fit for multiple purposes&quot;.\nso, a spork is a runcible spoon, but a large ladle suitable (?) for catching frogs would also be called a &quot;runcible spoon&quot;.</p>\n<p>Thus a folding bicycle, or bicycles which can carry large amounts of cargo, or turn into a boat, etc, are &quot;runcible bikes&quot; a flying car, or a amphibious car are both runcible cars.</p>\n<p>I feel this fits most of the way Lear uses &quot;runcible&quot;, especially when he uses it just suggest silly person as a &quot;runcible goose&quot;</p>\n</blockquote>\n<ul>\n<li>%WN2c+WVV3vQFieER+vPmw0g9nLZIBcBJyG/JcYLhuWc=.sha256</li>\n</ul>\n<h2 id=\"uxer\">uxer</h2>\n<blockquote>\n<p>uxer is a sort of mashup shorthand for the user-experienceR, which is not the &quot;experience&quot; as perceived by others (UX) but the person who is getting treated... the uxer is the &quot;UX Designer&quot;</p>\n<p>In the context of p2p, uxer makes more sense, cuz we&#39;re flip the paradigm of ownership, and should be designing from the first person.</p>\n<p>IMHO the ultimate goal is for people to not only &quot;own&quot; their &quot;experience&quot;, but design their own applications;  for the perfect world, the latter predicates the former;  to which ends, anarchitecture.</p>\n</blockquote>\n<ul>\n<li>%RODaSpl6Hu+D7OFtISF8TDlYVOKWOUWOz1Al3rwcVtw=.sha256</li>\n</ul>\n","modules.md":"<h1 id=\"modules\">Modules</h1>\n<blockquote>\n<p>Isaac Schlueter (creator of npm) puts it very well: agreement is very difficult, so limit the amount of agreement necessary.</p>\n<p>i.e. write modules.</p>\n<p>With less agreement required, it&#39;s easier to find points of agreement, and so we can have <em>more</em> agreements overall.</p>\n</blockquote>\n<ul>\n<li>%88KMgyXpuyF1O1VtKjkycJ+R5j7sJ/DgFwLVAS19J4U=.sha256</li>\n</ul>\n<h2 id=\"secure-scuttlebutt-vs-scuttlebutt-vs-scuttlebot-vs-sbot-\">Secure-scuttlebutt vs scuttlebutt vs scuttlebot vs sbot?</h2>\n<h4 id=\"an-explanation-of-terms-repos-and-project-history\">An explanation of terms, repos and project history</h4>\n<ul>\n<li><p><a href=\"https://github.com/dominictarr/scuttlebutt\"><code>scuttlebutt</code></a>: a <a href=\"https://en.wikipedia.org/wiki/Gossip_protocol\"><code>gossip protocol</code></a> that synchronises messages via a vector clock of per-node timestamps or sequences. Dominic got this name from an amazon paper <a href=\"https://www.cs.cornell.edu/home/rvr/papers/flowgossip.pdf\">&quot;Efficient Reconciliation and Flow Control for Anti-Entropy Protocols&quot;</a>. This is the original scuttlebutt module which should now be known as &quot;insecure scuttlebutt&quot;. This repo is generally no longer used by the ssb community.</p>\n</li>\n<li><p><a href=\"https://github.com/ssbc/secure-scuttlebutt\"><code>secure-scuttlebutt</code></a>: this is the <strong>database</strong> part of <strong>ssb</strong>. Previously this term referred to the protocol/database as a whole.</p>\n</li>\n<li><p><a href=\"https://github.com/ssbc/scuttlebot\"><code>scuttlebot</code></a>: this repo adds <strong>networking behaviour</strong> to the database (secure-scuttlebutt).</p>\n</li>\n<li><p><a href=\"https://github.com/ssbc/scuttlebot\"><code>sbot</code></a>: short for <strong>scuttlebot</strong>, also the cli command name.</p>\n</li>\n</ul>\n<p>There have been suggestions to rename some repos to better reflect their use and purpose:</p>\n<p>secure-scuttlebutt --&gt; <a href=\"https://github.com/ssbc/secure-scuttlebutt/issues/159\"><code>ssb-db</code></a>\nscuttlebot --&gt; <a href=\"https://github.com/ssbc/scuttlebot/issues/378\"><code>ssb-server</code></a></p>\n<h2 id=\"streams\">Streams</h2>\n<ul>\n<li><a href=\"https://pull-stream.github.io\"><code>pull-stream</code></a>: minimal composable streams with lazy back pressure and error propagation</li>\n<li><a href=\"https://github.com/mmckegg/mutant\"><code>mutant</code></a>: lazy observables and reactive html elements</li>\n</ul>\n<h2 id=\"modules\">Modules</h2>\n<ul>\n<li><a href=\"https://github.com/depject/depject\"><code>depject</code></a>: a module system that allows for overlapping opinions</li>\n</ul>\n<h2 id=\"database\">Database</h2>\n<p><a href=\"https://github.com/ssbc/secure-scuttlebutt\"><code>secure-scuttlebutt</code></a>: database of unforgable append-only feeds, optimized for efficient peer-to-peer replication</p>\n<ul>\n<li><a href=\"https://github.com/flumedb/flumedb\"><code>flumedb</code></a>: modular database where logs are moved with streams</li>\n<li><a href=\"https://github.com/ssbc/ssb-keys\"><code>ssb-keys</code></a>: keyfile operations for ssb</li>\n<li><a href=\"https://github.com/ssbc/ssb-feed\"><code>ssb-feed</code></a>: create a secure-scuttlebutt feed</li>\n<li><a href=\"https://github.com/ssbc/ssb-config\"><code>ssb-config</code></a>: standard configuration for ssb</li>\n<li><a href=\"https://github.com/ssbc/ssb-ref\"><code>ssb-ref</code></a>: check if a string is a valid ssb-reference</li>\n</ul>\n<h2 id=\"crypto\">Crypto</h2>\n<ul>\n<li><a href=\"https://github.com/auditdrivencrypto/secret-handshake\"><code>secret-handshake</code></a>: secure-channel based on a a mutually authenticating key agreement handshake, with forward secure identity metadata.</li>\n<li><a href=\"https://github.com/auditdrivencrypto/private-box\"><code>private-box</code></a>: private message between two parties (with no <code>to</code> field)</li>\n</ul>\n<h2 id=\"server\">Server</h2>\n<p><a href=\"https://github.com/ssbc/scuttlebot\"><code>scuttlebot</code></a>: peer-to-peer log store used as a database, identity provider, and messaging system</p>\n<ul>\n<li><a href=\"https://github.com/ssbc/muxrpc\"><code>muxrpc</code></a>: lightweight multiplexed rpc</li>\n<li><a href=\"https://github.com/ssbc/mdmanifest\"><code>mdmanifest</code></a>: markdown manifests for mux rpc apis</li>\n<li><a href=\"https://github.com/ssbc/muxrpcli\"><code>muxrpcli</code></a>: command-line interface to mux rpc servers</li>\n<li><a href=\"https://github.com/ssbc/secret-stack\"><code>secret-stack</code></a>: connect peers to each other using secret-handshakes</li>\n<li><a href=\"https://github.com/dominictarr/ssb-query\"><code>ssb-query</code></a>: a functional query engine, that operates over streams of js objects, and can be optimized via database indexes.</li>\n<li><a href=\"https://github.com/ssbc/ssb-blobs\"><code>ssb-blobs</code></a>: blob gossiping ssb-subprotocol</li>\n<li><a href=\"https://github.com/dominictarr/multiblob\"><code>multiblob</code></a>: a content-addressable-store that supports multiple hashing algorithms</li>\n<li><a href=\"https://github.com/ssbc/ssb-ebt\"><code>ssb-ebt</code></a>: replication with epidemic-broadcast-trees</li>\n<li><a href=\"https://github.com/staltz/easy-ssb-pub\"><code>easy-ssb-pub</code></a>: an easy-to-host server that runs an SSB &quot;Pub&quot;</li>\n</ul>\n<h2 id=\"client\">Client</h2>\n<ul>\n<li><a href=\"https://github.com/ssbc/patchcore\"><code>patchcore</code></a>: a shared library to build ssb apps</li>\n<li><a href=\"https://github.com/ssbc/ssb-client\"><code>ssb-client</code></a>: client library to scuttlebot</li>\n<li><a href=\"https://git.scuttlebot.io/%25bS%2FWGqQrhQfH8eoyWieK%2B9M56DjJ8Q4ulkvb6sXZwPo%3D.sha256\"><code>ssb-party</code></a>: get a scuttlebot client instance. if scuttlebot isn&#39;t running, start it in the background, and keep it running until all the clients have disconnected.</li>\n<li><a href=\"https://github.com/ssbc/ssb-notifier\"><code>ssb-notifier</code></a>: desktop notifications for secure-scuttlebutt activity</li>\n<li><a href=\"https://github.com/dominictarr/ssb-avatar\"><code>ssb-avatar</code></a>: query for the avatar that an ssb feed has been assigned</li>\n<li><a href=\"https://github.com/dominictarr/ssb-mentions\"><code>ssb-mentions</code></a>: extract the mentions in a ssb message</li>\n<li><a href=\"https://github.com/ssbc/ssb-markdown\"><code>ssb-markdown</code></a>: render ssb messages to markdown.</li>\n<li><a href=\"https://github.com/ssbc/ssb-sort\"><code>ssb-sort</code></a>: sort a collection of messages by their causal order</li>\n</ul>\n<h2 id=\"git\">Git</h2>\n<ul>\n<li><a href=\"https://git.scuttlebot.io/%25n92DiQh7ietE%2BR%2BX%2FI403LQoyf2DtR3WQfCkDKlheQU%3D.sha256\"><code>git-ssb</code></a>: Git repos, issue tracking, and pull requests using SSB<ul>\n<li><a href=\"https://git.scuttlebot.io/%25ZVTOK3GA2aewEDI2rPxJqKXEIv4OIUN2swMPE2FeJm8%3D.sha256\"><code>git-remote-ssb</code></a>: A git remote helper for using <code>ssb://</code> URLs with git</li>\n<li><a href=\"https://git.scuttlebot.io/%25q5d5Du%2B9WkaSdjc8aJPZm%2BjMrqgo0tmfR%2BRcX5ZZ6H4%3D.sha256\"><code>git-ssb-web</code></a>: A web server for browsing repos locally</li>\n</ul>\n</li>\n</ul>\n","principles.md":"<h1 id=\"scuttlebutt-principles\">Scuttlebutt Principles</h1>\n<blockquote>\n<p>secure-scuttlebutt is a venn diagram of the overlay between these two things:</p>\n<ol>\n<li>avoid hard data replication problems (single author append only log, easy to express replication state &amp; no conflicts)</li>\n<li>need to build engaging apps with viral growth (can apply web 2.0 playbook)</li>\n</ol>\n<p>It&#39;s a synergy between computer and human abilities. Computers move the data, but we levearge human filtering to solve the capital-H Hard Problem of decentralized systems: avoiding Sybil Attacks - humans are much better at detecting spam/etc than computers, and social apps have this &quot;follow&quot; or not decision naturally built into them.</p>\n<p>Not that I think social apps are the most worthy, but rather that its an easy design and can be applied to a wide variety of application needs, and then hopefully this will lead to another generation of protocol development.</p>\n</blockquote>\n<ul>\n<li>%tN76rhfhajvOPB7qx0HZLIdjxzy3/5+h6eRv9aChGr8=.sha256</li>\n</ul>\n<h2 id=\"subjectivity\">Subjectivity</h2>\n<blockquote>\n<p>&quot;the meaning of an action is not the label on the button, it&#39;s how the humans use it, and how other humans react to the behavior that computers execute. buttons labeled &#39;like&#39; or &#39;trust&#39; do not necessarily mean that. We have to think about it like anthropologists&quot;</p>\n</blockquote>\n<ul>\n<li>%P1see8CMH8StoXs9CMzwIahrjE+Ht8FeCNjsV3eRgZw=.sha256</li>\n</ul>\n<h2 id=\"usability\">Usability</h2>\n<blockquote>\n<p>I think the concept of &quot;usability&quot; applies at every layer in the stack, for example, nacl is a lot more usable than openssl. That means, it broadens development of crypto, and then those projects have the opportunity to be more usable in turn to their users.</p>\n</blockquote>\n<ul>\n<li>%xXabtralTRa1aMpSmR42GhYBCqt1DbfcwPrIWIn7RVM=.sha256</li>\n</ul>\n<h2 id=\"community\">Community</h2>\n<blockquote>\n<p>teaching a man to fish is the easy part, you must then teach his community how to <a href=\"https://en.wikipedia.org/wiki/Elinor_Ostrom#Design_principles_for_Common_Pool_Resource_.28CPR.29_institutions\">govern a commons</a></p>\n</blockquote>\n<ul>\n<li>%P3/ysGuvI9m4qCacXK+svHzoyMI4uJcymYOKAszJbiM=.sha256</li>\n</ul>\n<blockquote>\n<p>@yorkshire-moose we also use it to figure out what it means to have decentralized communication medium.</p>\n<p>Many of the concepts we have for thinking about this stuff are inadequate,\nfor example, you asked about your &quot;account&quot;. On a normal website, your account is just a record in a database which says if you know a password, you can post as that account. Before computers, you might have joined a club and &quot;signed up&quot; in the club&#39;s membership registry (a book). Because computers where first sold to military, then large corporations. Of course computers are about accounting.\nKeeping records about who owns what in books, or book-like systems.</p>\n<p>In a database system, all the power is in the database. It&#39;s often called a &quot;single source of truth&quot;. Who can do what is ultimately controlled by whoever administers the database.</p>\n<p>Here, we have no central database to decide for us what a given action means, instead when you make a post or a &#39;dig&#39; or change your picture, the other peers (or rather, the software they run) interprets that. A social consensus. Like how &quot;blue&quot; means what it does because we agree it does, and that agreement can also evolve. &quot;blue&quot; means, at least, a color, a sad feeling, and a certain type of film.</p>\n<p>But what are the implications of a system that doesn&#39;t behave like an accounts book? Where could that go?</p>\n<p>Just trying to understand what it means to be free.</p>\n</blockquote>\n<ul>\n<li>%XMerwh7QoerzydCWsDlzgaLU/FD1vIjroHKYaf84B3c=.sha256</li>\n</ul>\n<blockquote>\n<p>It&#39;s true, developers do have a lot of power, and users have very little. &quot;user&quot; is another of these words which are problematic in this context. In terms of political empowerment, the implications of &quot;user&quot; is a lot like &quot;pleb&quot;. Developers are like the landed gentry.</p>\n<p>But, there is a <em>natural right</em> that users always have: they can choose whether or not to run a given piece of software. Developers often act to hamper this right, for example, when you use a website your browser always &quot;installs&quot; the latest version. If you download a program and run it, you can at least, keep running the old version, if there isn&#39;t an automatic update mechanism (which empowers developers again). There used to be a lot of 3rd party twitter clients, but they stopped that when they introduced advertising, having a centralized system gave them the power to do this easily. The user still has the option to quit facebook, etc, but they must either take it or leave it. It&#39;s an ultimatum.</p>\n<p>But since secure scuttlebutt is a <em>protocol</em>, I can never stop someone from implementing, or choosing to use different software to interpret it. That is why I call it a &quot;natural right&quot; it&#39;s just there, basically a part of the universe, and you can act to hamper it, but you can never truly take it away.</p>\n<p>But what happens if you instead act to enhance that natural right?\nIf you make it easier for users to choose their interpretation of reality, and harder for developers to impose ultimatums?</p>\n<p>Developers get their power from users choosing their software, so if users have more freedom to choose, it will force developers to make <em>better software</em>. To create software that helps users live better lives, instead of herding them like cattle into advertising-milking sheds.</p>\n<p>But of course, to do that, we actually have to rethink a bunch of stuff.</p>\n<p>Ultimately, the question is, if we make a better system, will it win?</p>\n</blockquote>\n<ul>\n<li>%hQMXHkZBPgO5x8HqiCeHxZKJWFferucYm00Hew9DHEU=.sha256</li>\n</ul>\n<blockquote>\n<p>&quot;but remember, the value of the internet is ultimately that it&#39;s a network of people&quot;</p>\n</blockquote>\n<ul>\n<li>%P1see8CMH8StoXs9CMzwIahrjE+Ht8FeCNjsV3eRgZw=.sha256</li>\n</ul>\n<h2 id=\"dogfood\">Dogfood</h2>\n<blockquote>\n<p>When it comes to emergency survival situations, it helps a lot if your survival equipment is also the equipment that you use every day. Then you know it works, is maintained, and you know how to use it!</p>\n</blockquote>\n<ul>\n<li>%GAjTyOlMxMNGwKX+qeggyBzcWfJXLsBGkAIXuDibVPs=.sha256</li>\n</ul>\n<blockquote>\n<p>always be rewriting everything</p>\n</blockquote>\n<ul>\n<li>%hNetYXl04RcAu/+/uayn/Fh46+96DC7S+EV1Q8YPMf4=.sha256</li>\n</ul>\n<blockquote>\n<p>no, not sure. It&#39;s just a plan to get something working, so that we can build on that then explore further.</p>\n</blockquote>\n<ul>\n<li>%jhevrzmT2QR4nCr2ZBpCe8JOgsV/J4NqSCg+0in7/rU=.sha256</li>\n</ul>\n<h2 id=\"modular\">Modular</h2>\n<blockquote>\n<p>I think there is a sliding scale here. to build a p2p system currently you must understand crypto and distributed systems. That is much harder than plain web development. And then easier still is configuring drupal or wordpress. You can still make a hell of a lot with drupal, just by enabling/disabling/configuring modules. This is a pattern that has been demonstrated to be successful in practice.</p>\n</blockquote>\n<ul>\n<li>%4etPxosu6kLyjZ2vqLxVFInbmQGXPVa2XcrTsKLICgc=.sha256</li>\n</ul>\n<blockquote>\n<h1 id=\"the-ikea-architecture\">The Ikea Architecture</h1>\n<p>What is interesting about well designed but cheaply made flat pack furniture? The way that they manage the distinction between essential elements of their design, and arbitary elements of their design.</p>\n<p>As is obvious to anyone who has assembled an ikea product, they are mostly made from <a href=\"https://en.wikipedia.org/wiki/IKEA#Furniture\">MDF</a>. But that is only <em>half the story</em>. MDF is used for the <em>arbitary</em> part of the design,\nthis season it might look like this, next season, like that. The machinery that cuts out the MDF can cut of any shape (and it&#39;s mostly rectangles anyway) so they can iterate on that those aspects of the design as fashion dictates or simply for the sheer hell of it.</p>\n<p>But there is one thing that doesn&#39;t change. <a href=\"http://www.ikea.com/us/en/catalog/products/75719200/\">_The Hinges</a> incorporate the part of the design that is &quot;objective&quot;. Not only are the hinges solidly constructed (probably rated for a much heavier door than your little warddrobe) but they are <a href=\"http://www.wikihow.com/Adjust-Euro-Style-Cabinet-Hinges\">adjustable in <em>3 dimensions</em></a>, this means that if the MDF parts don&#39;t fit exactly, or if your floor is crooked and your shelf warps, the hinge can just be adjusted so that the door still closes nicely.</p>\n<p>Handcrafted solid wood furniture would put a lot of effort into making the body of wardrobe solid and sturdy, and could then <a href=\"https://duckduckgo.com/?q=butt+hinge&amp;t=canonical&amp;iax=1&amp;ia=images\">simple &quot;butt&quot; hinges</a>\nBut this furniture must be assembled by an expert craftsperson, and cannot be shipped flat.</p>\n<p>The Ikea Architecture separates <em>engineering</em> from <em>design</em>. This means that designers don&#39;t need to think hard about engineering problems and can simply focus on what <em>customers want to buy</em>.</p>\n<hr>\n<p><em>Obviously</em> I am actually talking about software. Specifically, about <em>User Applications</em>. This does not apply to developer tools, because that is nearly entirely engineering. but if you looked at user software, it&#39;s mostly <em>mdf</em>, or at least it should be.</p>\n<p>Tests to check if you have achive Ikea Architecture:</p>\n<ul>\n<li>can designers easily break your system (fail)</li>\n<li>is it easy to repurpose your work into something different (win)</li>\n<li>are the hard parts useful for other things? (win)</li>\n</ul>\n<p>When we talk about &quot;modular user interfaces&quot; I think it&#39;s misleading, because the things you actually see and touch in a user interface is mostly MDF. there may be a lot of code there, but it isn&#39;t interesting.\nIf it <em>is interesting, that is a bad sign</em> that means it should be moved out to a place where it can be solved in isolation, you need to put much more effort into a part that will be reused (it <em>must</em> be reused, to justify that effort)</p>\n<p>So I think what we really need, if we want &quot;modular user interfaces&quot; is some quality Hinges, and an easy way of dealing with the MDF.</p>\n</blockquote>\n<ul>\n<li>%5U+7Fblfzf1iO+bE+anI/wn/L9L0LkpM5A9+Mlf0Wcc=.sha256</li>\n</ul>\n<h2 id=\"-uncapturable-https-github-com-mixmix-blogposts-blob-master-uncapturable_distribution-md-\"><a href=\"https://github.com/mixmix/blogposts/blob/master/uncapturable_distribution.md\">Uncapturable</a></h2>\n<blockquote>\n<p>Q: is the npm registry still open source?\nA: no. npm, inc is now intergalactic feudal empire</p>\n<p><a href=\"https://github.com/npm/registry/issues/41\">https://github.com/npm/registry/issues/41</a></p>\n<p><em>he who controls the spice controls the universe</em></p>\n</blockquote>\n<ul>\n<li>%f6No+0gckncREe2dLT9fRw6MY99AH4SJC+2/bIUd9YI=.sha256</li>\n</ul>\n<blockquote>\n<p>@rabble just gave a very interesting talk at opensourceopensociety here in wellington.</p>\n<p>largely, it was about how twitter started out as an open platform, and then look a right turn and closed up - but what I didn&#39;t know, is that this was actually a reaction to an attempted hostile takeover. Basically, A there was a VC would tried to acquire all the independent twitter clients, and then have them also push to another service, shifting the data out of twitter.com&#39;s hand.</p>\n<p>This was the first I have heard about this, though, but it certainly gives us a more concrete threat model. Since we are basically trying to take the road that twitter didn&#39;t.</p>\n</blockquote>\n<ul>\n<li>%QRBYdJkoOj1PlIpwhtEcXPBGIcXyugaVwiUhuTSr90g=.sha256</li>\n</ul>\n","talks.md":"<h1 id=\"scuttlebutt-talks\">Scuttlebutt Talks</h1>\n<h2 id=\"embracing-subjectivity\">Embracing Subjectivity</h2>\n<h3 id=\"mix-irving-nz-js-con-new-zealand-js-conference-2017\">Mix Irving @ nz.js(con); New Zealand JS Conference 2017</h3>\n<blockquote>\n<p>Cast central authorities aside and take a tour of a inter-net conceived subjectively. Learn about the challenges and benefits of not having singlular sources of truth, and take a tour of the Scuttleverse - an actively growing decent community (of code and humans).</p>\n</blockquote>\n<p><a href=\"https://youtube.com/watch?v=P5K18XssVBg\"><img src=\"./assets/mix-embracing-subjectivity.png\" alt=\"Mix embracing subjectivity\"></a></p>\n<p><a href=\"https://youtube.com/watch?v=P5K18XssVBg\">https://youtube.com/watch?v=P5K18XssVBg</a></p>\n<h2 id=\"signed-merkel-logs\">Signed Merkel Logs</h2>\n<h3 id=\"paul-frazee-decentralized-web-summit\">Paul Frazee @ Decentralized Web Summit</h3>\n<blockquote>\n<p>Signed merkle logs: What are they, and Why they&#39;re so useful in decentralized systems.</p>\n</blockquote>\n<p><a href=\"https://www.youtube.com/watch?v=PfWgin3JlAU&amp;t=20417\"><img src=\"./assets/paul-signed-merkel-logs.png\" alt=\"Paul on signed merkel logs\"></a></p>\n<p><a href=\"https://www.youtube.com/watch?v=PfWgin3JlAU&amp;t=20417\">https://www.youtube.com/watch?v=PfWgin3JlAU&amp;t=20417</a></p>\n<h2 id=\"securescuttlebutt-a-secure-gossip-protocol\">SecureScuttlebutt: A Secure Gossip Protocol</h2>\n<h3 id=\"dominic-tarr-new-zealand-internet-research-forum\">Dominic Tarr @ New Zealand Internet Research Forum</h3>\n<p>%6Yjqj01y7Z5Nmc5HItGojEtz8rUGMcfRLiPQQgZpBF0=.sha256</p>\n<p><a href=\"https://github.com/dominictarr/ssb-talk/blob/master/slides.md\">https://github.com/dominictarr/ssb-talk/blob/master/slides.md</a></p>\n<h2 id=\"design-challenges-of-decentralized-systems\">Design Challenges of Decentralized Systems</h2>\n<h3 id=\"dominic-tarr-data-terra-nemo-2015\">Dominic Tarr @ Data Terra Nemo 2015</h3>\n<p><a href=\"https://www.youtube.com/watch?v=_3eBT46vkaI\"><img src=\"./assets/dominic-design-issues-for-p2p.png\" alt=\"Dominic on design issues for peer-to-peer systems\"></a></p>\n<p><a href=\"https://www.youtube.com/watch?v=_3eBT46vkaI\">https://www.youtube.com/watch?v=_3eBT46vkaI</a></p>\n<h2 id=\"decentralized-databases-and-the-end-of-the-web-host\">Decentralized Databases, and the End of the Web Host</h2>\n<h3 id=\"paul-frazee-js-la-april-2015\">Paul Frazee @ JS.LA April 2015</h3>\n<blockquote>\n<p>How do we synchronize user devices without using servers or central coordination? Join us for a discussion of content-addressing, secure data structures, the web of trust, and apps-development in a post-host Web.</p>\n</blockquote>\n<p><a href=\"https://www.youtube.com/watch?v=8sXTEi8U2bw\"><img src=\"./assets/paul-decent-db-and-end-of-web-hosts.png\" alt=\"Paul on decent databases\"></a></p>\n<p><a href=\"https://www.youtube.com/watch?v=8sXTEi8U2bw\">https://www.youtube.com/watch?v=8sXTEi8U2bw</a></p>\n<h2 id=\"secure-database-games\">Secure Database Games</h2>\n<h3 id=\"dominic-tarr-nodeconf-eu-2014\">Dominic Tarr @ nodeconf.eu 2014</h3>\n<p><a href=\"https://www.youtube.com/watch?v=Z8tfpRr1Hu8\"><img src=\"./assets/dominic-db-games.png\" alt=\"Dominic on database games\"></a></p>\n<p><a href=\"https://www.youtube.com/watch?v=Z8tfpRr1Hu8\">https://www.youtube.com/watch?v=Z8tfpRr1Hu8</a></p>\n<h2 id=\"mad-science-architectures\">Mad Science Architectures</h2>\n<h3 id=\"dominic-tarr-realtime-conference-2013\">Dominic Tarr @ Realtime Conference 2013</h3>\n<p>The puzzle pieces of secure-scuttlebutt are being assembled.</p>\n<p><a href=\"https://vimeo.com/77352417\"><img src=\"./assets/dominic-mad-science.png\" alt=\"Dominic on Mad Science\"></a></p>\n<p><a href=\"https://vimeo.com/77352417\">https://vimeo.com/77352417</a></p>\n<h2 id=\"colouring-with-crayons-and-playing-with-duplo-blocks\">Colouring with crayons and playing with Duplo blocks</h2>\n<h3 id=\"dominic-tarr-node-dublin-2012\">Dominic Tarr @ node Dublin 2012</h3>\n<p>On replication, eventual consistency, scuttlebutt and crayons.</p>\n<p><a href=\"https://www.youtube.com/watch?v=giS-aIq0Kaw\"><img src=\"./assets/dominic-crayons-duplo.png\" alt=\"Dominic on crayons and duplo\"></a></p>\n<p><a href=\"https://www.youtube.com/watch?v=giS-aIq0Kaw\">https://www.youtube.com/watch?v=giS-aIq0Kaw</a></p>\n","concepts/blob.md":"<h1 id=\"blob\">Blob</h1>\n<blockquote>\n<p>ipfs has very different privacy properties than ssb does, ipfs keeps a global table of all peers and what blobs they have/want in a DHT. That is good for when a blob is very popular, but I expect that eagerly gossiping blobs may be much better on for the long tail.</p>\n<p>But that is not to say that we don&#39;t want an integration, but just that there is no general solution.</p>\n</blockquote>\n<ul>\n<li>%0VMAucPpahwrUcXreeBFMi73RqTEavFXchBDEQpRX9U=.sha256</li>\n</ul>\n","concepts/cap.md":"<h1 id=\"capability\">Capability</h1>\n<blockquote>\n<p>zooko recommended this paper paradigm-revised.pdf as a good introduction to capability systems that isn&#39;t 200 pages long ;)\n(instead, only 22)</p>\n</blockquote>\n<ul>\n<li>%Ff8Eu/CqkOsKzRrOKEIE2aqi3xYj0l9+wFvymAWBbe0=.sha256</li>\n</ul>\n","concepts/consensus.md":"<h1 id=\"trust\">Trust</h1>\n<h2 id=\"subjective\">Subjective</h2>\n<p>Scuttlebutt embraces subjectivity. You are your own central authority on truth.</p>\n<p>There is no &quot;objective&quot; truth, no global singleton, no consensus process.</p>\n<p>Each peer can publish whatever they want, and interpret another message however they want. The meaning is created when two peers have the same interpretation. You don&#39;t get to choose how someone interprets you, but you may choose how you interpret them.</p>\n<blockquote>\n<p>ssb is designed to take not needing consensus as far as possible!</p>\n</blockquote>\n<ul>\n<li>%W1dULMLRGVRJcl5qFt4IUGb2L7i1AX1xjpwjrBzHZnU=.sha256</li>\n</ul>\n<blockquote>\n<p>to get consensus on same thing, you first need to get consensus on who is in the consensus group.</p>\n</blockquote>\n<ul>\n<li>%B+/ogJ35iy2NGlHR+Q4f4O7GcftANZ1l8pY00bqf4B4=.sha256</li>\n</ul>\n","concepts/feed.md":"<h1 id=\"feed\">Feed</h1>\n<p>A feed is a signed append-only sequence of messages. Each identity has exactly one feed.</p>\n<p>Note that append-only means you cannot delete an existing message, or change your history. This is enforced by a per-feed blockchain. This is to ensure the entire network converges on the same state.</p>\n<h2 id=\"blockchain-sigchain\">Blockchain? -&gt; Sigchain</h2>\n<blockquote>\n<p>The main difference is that ssb does not use Proof of Work to choose the next valid block for a global blockchain. Instead, each identity gets their own personal blockchain (i will use &quot;sigchain&quot;). So bitcoin is 1 blockchain, ssb is many sigchains.</p>\n<p>The following will be true of pretty much any secure decentralized system:</p>\n<p>Both use hashes as links to build structures. bitcoin and ssb are both based around chain structures. ssb also use links to create trees (eg, discussion threads)</p>\n<p>Both use signatures to represent an actions performed by an identity, and public keys to represent that identity.</p>\n</blockquote>\n<ul>\n<li>%o7qQdE9/NKbNuy1anZIoOWrnsfFF3Cef7ozZwrNcRdQ=.sha256</li>\n</ul>\n<blockquote>\n<p>It mainly differs in philosophy. secure-scuttlebutt avoids not just centralization, but also global singletons. So there is no DHT.\nBoth are built on the concepts of hashes as links and public keys as identity.</p>\n<p>Then the main structure in ssb is that each user&#39;s feed is an append-only signed chain. This structure is very simple, and optimized for efficient replication. To get all you latest updates, I just have to tell a mutual friend the latest sequence number I have received from you.\n(on ipfs, i&#39;d have to work backwards from your latest ipns value)\nI think a forward replicating database is easier to reason about and build other things on top of.</p>\n<p>Since there is no global network, everything depends on your social network. That is the gamble here. But, I think it&#39;s a good one. Life has confusingly many options - but we have a simple solution, ask your friends. Spam filtration is the same thing from the other end, what do i not want to see. Take things like the search on google play store - it&#39;s so fully of crap (and full of spam reviews) that you are better off asking on twitter. I call twitter solicited spam. since it&#39;s pull only, it just doesn&#39;t have the same spam problems as email (except for mentions/replies/favs)</p>\n<p>By default, you replicate the feeds you directly follow, and the feeds they follow. this provides availability for the network, and also means you can see replies from someone you don&#39;t directly follow. it creates a soft boundry to your social network, so once we scale, you won&#39;t get spam in your mentions, etc.</p>\n</blockquote>\n<ul>\n<li>%XnwMywLJAWqRXCAt9YmPuIghlr9tyAZNiKgbDOg385g=.sha256</li>\n</ul>\n<h2 id=\"-non-repudiation-https-en-wikipedia-org-wiki-non-repudiation-\"><a href=\"https://en.wikipedia.org/wiki/Non-repudiation\">Non-repudiation</a></h2>\n<blockquote>\n<p>With a signature chain, you&#39;d still have that even if it where possible to &quot;forget&quot; parts, because someone probably has that post, and they&#39;d be able to come forward, and everyone could verify that was the deleted post.</p>\n<p>Having peruasive non-repudation also means that you can&#39;t claim someone said something they didn&#39;t, so you can&#39;t post a doctored screenshot because no one will believe it.</p>\n</blockquote>\n<ul>\n<li>%ZmudAToEvD6baAFDkrUjj28ySXhI7CRGWRvuYLwMmtQ=.sha256</li>\n</ul>\n<blockquote>\n<p>@johnny that is true. You could abandon your account, throw your hands up and claim &quot;i&#39;ve been hacked!!!&quot; that might be a bit harder to pull off credibly (depending on exactly what you where trying to delete)</p>\n<p>But I have a more radical idea, I&#39;m not sure if the world is ready for it, but here it is: you could apologise. Then the bad post would show back links to the apology, and readers could interpret it in the new context.</p>\n</blockquote>\n<ul>\n<li>%xwlk7+jk+jTLvaTq/0G8T5YaoXTacM7Gb7Ko8xVUtuY=.sha256</li>\n</ul>\n<blockquote>\n<p>note: we havn&#39;t really discussed &quot;off-the-record&quot; much here in patchworkland, but it&#39;s often argued that that is the dominant mode of natural human communication. Most casual communications (face to face) do not create a trail of evidence, and either party can claim that they didn&#39;t say what the other said they did. Sometimes people like to imbibe certain substances which increases denyability! even in a business context! if you went drinking with clients while negioating a deal that is like denyable encryption, but (hopefully) you wait until the next day when you are sober to sign the contract (on the record).</p>\n<p>ssb/patchwork doesn&#39;t do denyable, but you could use it to bootstrap another protocol which was denyable.</p>\n</blockquote>\n<ul>\n<li>%Xp2EDToHDgeDzyFEYVPM2wv57p/HDjxGsLkJuYPCeaI=.sha256</li>\n</ul>\n<h2 id=\"consistency\">Consistency</h2>\n<blockquote>\n<p>I hate to rain on a parade, but one thing is that the relationship between boats is a lot more libertarian than the relationship between the crew of one boat. Even Plato uses the example of the ship at sea to argue for his idea of the geek dictator (&quot;philosopher king&quot;).\nThe crew are literally &quot;all in the same boat&quot; and so there isn&#39;t really much room for disagreement. Historically, western culture has decided that the best way to run a boat is under the command of a single captian, and not many people have argued with this. I wouldn&#39;t be surprised if it&#39;s impossible to ensure the boat without a designated captian. I think this will create a tension that you&#39;ll have to work around, at least.</p>\n<p>On the other hand, if this was a flotilla of boats... then I think you&#39;d begin to see a natural harmony between you idea and decentralization. Islands of consistency in a sea of eventualness.</p>\n<p>Prehaps, you could pitch this not as a single vessel, but as a prototype for a flotilla... maybe invite current sea captians to join your network? That way you might be able to release some of the inevitable pressure of forcing participants into too small a space (1 ship)</p>\n</blockquote>\n<ul>\n<li>%2vsznn20SD82ChXVcMKKt4J2/Cjcle1pjMFI+bpYjkM=.sha256</li>\n</ul>\n<h2 id=\"monotonic\">Monotonic</h2>\n<blockquote>\n<p>@johnny monotonic chains make replication easy.</p>\n</blockquote>\n<p>%qSbpvIFz41EhBtIuI3UZzGbRNUhVtGdVAAUpYsJHsPU=.sha256</p>\n","concepts/gossip.md":"<h1 id=\"gossip\">Gossip</h1>\n<p>In Scuttlebutt, 3rd parties can relay (gossip) information for you, which improves availability.</p>\n<p>Every message is signed, so gossipers cannot interfer with the message - note this is significantly different than real world gossip! <em>secure</em> gossip if you will.</p>\n<p><a href=\"https://twitter.com/BatLabels/status/700324774833217536\"><img src=\"../assets/gossip-phone.jpg\" alt=\"GOSSIP PHONE\"></a></p>\n<h2 id=\"following\">Following</h2>\n<p>Users choose which <a href=\"./feed.html\">feeds</a> to synchronize by following them.</p>\n<p>Presently, Scuttlebot&#39;s replicate plugin, which is enabled by default, looks on the master user&#39;s feed for <code>type: contact</code> messages to know which users are currently followed.</p>\n<h2 id=\"replication\">Replication</h2>\n<p>Since feeds are append-only, gossip is simple: request all messages in the feed that are newer than the latest message you know about. Scuttlebot maintains a table of known peers, which it cycles through, asking for updates for all followed feeds.</p>\n<p>Since the messages are always signed, information can be distributed in any way, such as through a <a href=\"https://en.wikipedia.org/wiki/Sneakernet\">sneakernet</a>. For example, you could put the latest gossip on an SD card and send it to your friend via <a href=\"https://en.wikipedia.org/wiki/Pigeon_post\">pigeon post</a>.</p>\n<blockquote>\n<p>ssb is persisted without you going out of your way, it may be hang off of you for ever, but it&#39;s not a burden on you, you don&#39;t need to do anything to maintain that, except to continue being friends with people.</p>\n</blockquote>\n<ul>\n<li>%Cd6YRARJX29mkaP798JII3WwmlOWXEs6v8p1GjsSZL8=.sha256</li>\n</ul>\n<blockquote>\n<p>You could argue that ssb is a pub/sub protocol.\nBandwidth may be important, but it&#39;s not gonna be the architectural deal breaker that latency will be. We&#39;ve got at least 10 years to go before we&#39;ll need it, so the pitch would be more around developing a body of expertise in replication oriented software.</p>\n</blockquote>\n<ul>\n<li>%fr1H5OP4C6SRoZ3yNyJz02lh2fwR9DLH97hksYh+Op8=.sha256</li>\n</ul>\n<blockquote>\n<p>That was on the call that I missed.\nIf I had been there, I would have pointed out two things:</p>\n<p>the ipfs model works best if the blobs are popular - you have to connect to peers which also want them, not really the long tail though,</p>\n<p>And it also doesn&#39;t provide much privacy. You have to advertise which blobs you have on a DHT, accessible to everyone, so you&#39;ll never have very good privacy about which blobs you have.</p>\n<p>Where as, by gossiping the blobs, you&#39;ll get some extras, and you can plausably claim &quot;I was just holding this for a friend&quot;</p>\n</blockquote>\n<ul>\n<li>%Ooe/pswWabTDRm8gg+t5jfHzYzYUq/QHCRSnPtWelqg=.sha256</li>\n</ul>\n<blockquote>\n<p>the real problem is a bit more detailed than that. Even if you could easily address any device, that doesn&#39;t mean you could host a website on your phone. well, you could, sure, but that would just mean you have to keep your phone constantly on and connected.</p>\n<p>The more important thing about applications like ssb and ipfs etc, is that they may operate &quot;offline&quot; you connect address and connect to the data, not the device.</p>\n<p>The device is temporary and the data is not. That is completely the other way around from traditional systems. It helps here to remember just how modern crypto is. Modern Cryptography (hashes + signatures) is less than half as old as computer science. MC was only invented in the late 70&#39;s, but computer science was invented in the 30s (turing machines, etc)</p>\n<p>The internet existed before crypto, and so did unix.\nWe are only just figuring out how to build things with crypto...\nAddressability is the easy part. we want to be able to publish from your phone, but we don&#39;t actually want everyone in the world to be connecting to it, that would just DDOS your phone. With the web, your post goes viral, that is a DDoS, but with a correctly designed P2P network, when your post goes viral it just works better.</p>\n</blockquote>\n<ul>\n<li>%R3FPwcmwWhIra/iTWyctKderB7rcQ5BVNosOtsaf7Z4=.sha256</li>\n</ul>\n<blockquote>\n<p>oh, sorry. push or pull is a matter of perspective, and this splits the that hair again.</p>\n<p>Our &quot;pull&quot; is like a &quot;push request&quot;. &quot;Give me anything from this feed, asap&quot;.\nThis would add &quot;let me know when you have something on this feed&quot; which would just send a very short notification, which then maybe you&#39;d switch to &quot;everything, asap&quot; depending on what you are getting from your other connections.</p>\n</blockquote>\n<ul>\n<li>%Mkex213GELeOnUuSGUCaaPdZ8tYvrVIC+TuRs+1UhuQ=.sha256</li>\n</ul>\n<h2 id=\"network\">Network</h2>\n<p>The protocol creates a <a href=\"https://en.wikipedia.org/wiki/Gossip_protocol\">global gossip network</a>. This means that information is able to distribute across multiple machines, without requiring direct connections between them.</p>\n<p><img src=\"../assets/gossip-graph1.png\" alt=\"Gossip graph 1\"></p>\n<p>Even though Alice and Dan lack a direct connection, they can still exchange feeds:</p>\n<p><img src=\"../assets/gossip-graph2.png\" alt=\"Gossip graph 2\"></p>\n<p>This is because gossip creates &quot;transitive&quot; connections between computers. Dan&#39;s messages travel through Carla and the Pub to reach Alice, and visa-versa.</p>\n<blockquote>\n<p>You don&#39;t need all the data on your computer, just the data that is for your network, people you know, and maybe people they know.</p>\n<p>The idea is not to have the entire network, just a subset of it.</p>\n</blockquote>\n<ul>\n<li>%s8ISugQl8XLm09u4w1ZZi1yocWkvxycmTBA4okPPWc8=.sha256</li>\n</ul>\n<h2 id=\"blocking\">Blocking</h2>\n<blockquote>\n<p>yes! so we have a blocking feature in scuttlebot, but it&#39;s really more like twitter block, which ensures that they never get your feed. I think having both of these is best.</p>\n<p>You can&#39;t remove all evidence that you ever knew that feed, because it will still be in the log, but you can post a message saying that feed is blocked, and then refuse to replicate new messages from them.</p>\n<p>we have also talked about having subscribable block lists, which would be appropiate in this case!</p>\n</blockquote>\n<ul>\n<li>%1g2HIV449C3xGSIc5rxaptoWa7pvK7oLVdpCa1nuq8c=.sha256</li>\n</ul>\n<blockquote>\n<p>then you unfollow them. and/or you post a special message warning others, and then their software doesn&#39;t apply the friend-of-friend rule for that feed.</p>\n<p>But to be honest, we havn&#39;t had many assholes join (just one, but he left again), so we havn&#39;t had to really implement moderation controls yet.\nWe can&#39;t have centralized moderation, which is necessarily one-size-fits-all and doomed to privledge some over others anyway, but instead we can create tools so that a given community can moderate it self.</p>\n<p>for example, if you can block or mute someone, you could also subscribe to someone else&#39;s moderation. maybe to protect a more at-risk member - say you&#39;ll automatically block anyone they block gives them power.</p>\n<p>We can&#39;t make a system that assholes can&#39;t use, but we can make one where you don&#39;t have to listen to them. If push-based systems give you freedom of speach, this is freedom of listening.</p>\n</blockquote>\n<ul>\n<li>%jGdw9P7MVsl2TLSUkXfHhubsMeBvEz0hGl7zNCdo8jg=.sha256</li>\n</ul>\n<h2 id=\"spam\">Spam</h2>\n<blockquote>\n<p>All the defences against sybil attacks basically boil down to making it &quot;too expensive&quot; to create a sybil swarm. Basically, finding some way to create a &quot;real cost&quot; to creating an identity in the system.\nBitcoin does this with proof of work, because processors &amp; electricity are expensive. Ethereum enables you to do this with money. Often, centralized services require you to confirm your phone number (using the price of simcards).</p>\n<p>The other method is to do some kind of network analysis. This is broadly the approach that ssb uses - here independent parties post &quot;follow&quot; messages which bring that peer into your network. <a href=\"https://www.stellar.org/\">https://www.stellar.org/</a> is anothe example of this approach.\nFor a voting system, you could have each peer state who they accept the votes of, and discount peers that are not strongly connected to yourself. This is based on the assumption that it would be difficult to for an attacker to trick many people into expressing &quot;trust&quot; in them. This would require people being educated to take that expression fairly seriously, though.</p>\n<p>Maybe, if a sybil swarm did sneak in, and made a reckless proposal, the rest could sever their network from those sybils - just succeed.</p>\n<p>Of course, all of these approaches should probably be considered unproven...</p>\n</blockquote>\n<ul>\n<li>%oDcN+0dus8WD7J985vjOmewyftoIN9/8j2GrtG3Guck=.sha256</li>\n</ul>\n<blockquote>\n<p>Oh, the other problem, is that to usable in the face of spam, email as push messaging depends on content and metadata analysis. Encrypted push messaging is gonna be pretty vulnerable to spam. I don&#39;t think pull will have that same problem.</p>\n</blockquote>\n<ul>\n<li>%NMvkFVOBa9+RkCziMthRuSBujJIj7znLod6iGP1bQNs=.sha256</li>\n</ul>\n","concepts/identity.md":"<h1 id=\"identity\">Identity</h1>\n<p>Your identity is &quot;who you are&quot;.</p>\n<h2 id=\"true-name\">True Name</h2>\n<p>In Scuttlebutt, your <a href=\"http://dominictarr.com/post/106497926352/asymmetric-cryptography-works-like-magic\">True Name</a> is represented as an <a href=\"http://ed25519.cr.yp.to/\">ed25519 key pair</a> using <a href=\"https://github.com/jedisct1/libsodium\">libsodium</a> (<a href=\"http://dominictarr.com/post/133109715357/which-js-crypto-library-should-i-use\">why?</a>).</p>\n<p>The private key is your secret not to be shared with anyone. The public key is used as your identifier.</p>\n<p>There is no worldwide store of identities. Users must exchange pubkeys, either by publishing them on their feeds, or out-of-band.</p>\n<blockquote>\n<p>There is no session, and no logon. your identity is represented by a private key that is stored in on your computer.</p>\n<p>In ordinary websites, the server is the guardian of your identity,\nand grants it to you. This is the reverse, you are your own guardian.</p>\n<p>When you make a post, it creates a signed record, that appends to a history of things you have done. When my computer sees your messages,</p>\n<p>it knows it&#39;s, well, actually it doesn&#39;t know who you are, but it knows you are the same identity as before.</p>\n</blockquote>\n<ul>\n<li>%ox29TwlaATzXebEwpmzenTQKD2XN2cBrihCsHNm6qKE=.sha256</li>\n</ul>\n<blockquote>\n<p>So in the future, how i figure it will work, is when a child is born, the parents generate a private key for it. The parents could easily know the private key... and maybe that is for the best. But later, when the child is mature enough to understand the consequences, they would generate their own private key. Now they are cryptographically an adult.</p>\n</blockquote>\n<ul>\n<li>%9M3KSMrxigeIxJDIdVgm9HmBL7dg71eHMVnGYwDbByI=.sha256</li>\n</ul>\n<blockquote>\n<p>oh, sorry, let me clarify one thing I said wrong.</p>\n<p>There are two types of asymmetric cryptography (not actually the whole story but will do for now) signing, and exchange.</p>\n<p>you create a signature with a signing (private) key, and it&#39;s verified with a corresponding public key.</p>\n<p>Then there are also exchange keys, or called diffie-helman keys. There isn&#39;t really a widely used name for this type of key, mainly i think because it doesn&#39;t have a simple real-world metaphor like &quot;signing&quot; does. Anyway, exchange keys take <em>your</em> public key, and <em>my</em> secret key then combines the together to produces a shared exchange key.</p>\n<p>In <code>nacl</code> this operation is called <code>scalarmult</code>. That is an implementation detail really, in classic DiffieHelman a different mathematical operation is used, but it has the same behavior. That is, we can each take the other&#39;s public key, and our own secret key, and produce a key that essentially represents a relationship between us.</p>\n<p>In nacl both types of keys are used, signing keys are ed25519 keys, and exchange keys are curve25519 keys. <code>sign</code> uses <code>ed25519</code> keys, and <code>scalarmult</code> takes <code>curve25519</code>.\n<code>box</code> takes two exchange keys, and then uses <code>scalarmult</code> internally. There is also another function <code>secretbox</code> that just takes a symmetric key, say the output of <code>scalarmult</code>.</p>\n<p>To encrypt a private key, you probably don&#39;t encrypt it <em>to</em> anyone, so <code>secretbox</code> is the one to use. Also, you&#39;ll need to generate the key the first time, and then later, you&#39;ll need to restore it. To do that, you need a <em>seed</em>. That is just a random number, but make sure it&#39;s <em>really</em> random. instead of encrypting the private key, encrypt the seed, then regenerate the keypair from that seed.</p>\n</blockquote>\n<ul>\n<li>%lBglUeQhHbKRGigcXXZmeQOTXisoSAI9J3X6vnxsDhA=.sha256</li>\n</ul>\n<h2 id=\"nick-names\">Nick Names</h2>\n<p>In Scuttlebutt, anyone can set a nickname (petname) for another peer. It&#39;s akin to a human-memorable symlink to a cryptographic identifier.</p>\n<blockquote>\n<p>The web you are familiar with is organized like a property system. If you can claim a username, you &quot;own&quot; it. not here. here, you name is whatever people call you.\nYou can suggest a name, and an avatar, and we can use it. and you can rename us. This may seem unfamiliar at this point in history, but it is the natural way of the world.</p>\n</blockquote>\n<ul>\n<li>%1H99noUzO+kUrj8zwX0stfuUvX29X8HgXjHErfnwkOY=.sha256</li>\n</ul>\n<blockquote>\n<p>In a centralized system, the database is the source of all truth and enforcer of rules. Enforcing a rule like &quot;all names must be unique!&quot; is easy.</p>\n<p>In a decentralized system, like ssb, there is no single source of truth. peers must enforce a rule with collective action. This makes for a <em>lot</em> more wiggle room. To put it in database terms, it means anyone can write anything, but other clients will ignore what they think is invalid.</p>\n<p>So, names is patchwork are somewhat like IRC, except that when I mention you @akkartik it records both your human name and your public key, then I sign this message, so there is a cryptographic record that I call <code>@1DfC2qFuXuli/HOg3kJbKwxiOpc3jXLdJD3TnhtzWNs=.ed25519</code> &quot;akkartik&quot;</p>\n<p>I can call you anything. Unlike IRC, but like &quot;real life&quot;, other people choose your name. So, in ssb, a <em>name</em> is just a mapping from a string to a cryptographic token (i.e. public key, and git-ssb repos also have names)</p>\n<p>If I start using a new name for you, my old messages will still bear the name I used then, but it would still link to your public key.</p>\n</blockquote>\n<ul>\n<li>%7hcvpITRduLDNKpLqN6Xm+8d/t7aQu2YqZhBO3CtSC0=.sha256</li>\n</ul>\n<blockquote>\n<p>Don&#39;t ask anyone&#39;s <em>opinion</em> on a name, that is just a bikeshed, get people to use it and see what they <em>call</em> it. Let names emerge, like winning at charades.</p>\n</blockquote>\n<ul>\n<li>%am/DGQpKliHYgsYgUUXk4UHwz9rgn+0WN4oc4yq97Mw=.sha256</li>\n</ul>\n<blockquote>\n<p>@amnovak just because you can name it anything doesn&#39;t mean that it will be total chaos.\nNo one enforces natural language, we can invent new words that &quot;arn&#39;t in the dictionary&quot;, but since people want to be understood, that is enough consistency.</p>\n</blockquote>\n<ul>\n<li>%nrZecbFGe/Vx7tSUAfZMWM2/wZKnC7CdyTyvo6R7mxI=.sha256</li>\n</ul>\n<blockquote>\n<p>petnames should be a user aid: you can enter the url as a petname, and then the computer gives you back the exact name, which you can share securely. we loose a lot more than we gain with a naming registry. like, the recent npm thing. names become &quot;property&quot; instead of granted by the community.</p>\n</blockquote>\n<ul>\n<li>%oJtA0Lmj7PBo9KmkC99/cVHhNzi9+ulXAwvJvMIJY60=.sha256</li>\n</ul>\n<blockquote>\n<p>Yes! Anyway, all naming is subjective!\nIt&#39;s just that sometimes one opinion is privledged above others.</p>\n</blockquote>\n<ul>\n<li>%9s3P86A9UoiMpsGg/ffiIs0zl6YpDXvAl3MW7vP39t0=.sha256</li>\n</ul>\n<h2 id=\"trust\">Trust</h2>\n<blockquote>\n<p>Implicit vs. Explicit: we can interpret something like twitter or fb or the web as a &quot;reputation network&quot;, but most people don&#39;t actually think about that while they use it. So, just create an <em>implicit</em> reputation network, people just use it because it works for them, you don&#39;t need to pitch them on &quot;reputation network&quot;.</p>\n<p>For example, google traverses the links on all the websites they find, analyzes that graph and uses them to determine a <em>ranking</em> for all websites. That ranking score can be interpreted as &quot;reputation&quot;. The authors of those web links may not be thinking &quot;here is a reputable site&quot; or &quot;I want to increase this website&#39;s score&quot; but you can interpret this as an expression of trust, not because of the link but more because of the sites <em>they choose not to link to</em>. Linking is an <em>action</em> that expresses trust (involves a risk), not just a statement &quot;I trust X&quot;, which is pretty cheap.</p>\n<p>Another really interesting thing about page rank, is the graph represents a mathematical model of how humans &quot;surf&quot; the internet. refresher: before search engines where any good, you&#39;d just click around from links to links, go to some site, follow it&#39;s links, etc. pagerank simulated this, calculating the probability that if you&#39;d land on a given page if you spent your life just randomly clicking on links. I think the key here is that pagerank is based on a model of what <em>humans already do</em>, it just makes it faster.</p>\n<p>Gameability - how easy is it to create the appearance of trust/value?\nsystems like ebay have &quot;feedback&quot; which seems easy, and works in the case of ebay because ebay charges a transaction fee which would make it expensive to create a fake reputation. For example: I could create a bunch of ebay accounts and make my sock puppet accounts &quot;buy&quot; from me, then give me good feedback, so it would appear I made many transactions. However, even though I don&#39;t post the goods (to myself) I&#39;d still have to pay the ebay transaction fee! So if you see someone on ebay who has made thousands of transactions, the transaction fees for those may add up to more than they could make if they ripped me off one one transaction, so I can be pretty confidant in making that purchase.</p>\n<p>In a decentralized system like ssb, an identity is just a key pair, and I could generate thousands of those a second, it would be really easy to create sock puppets that appeared to &quot;trust&quot; me. Any realistic reputation system would need to have a way to rule this out - a straight sum of all the feedback probably wouldn&#39;t work, but something that traced a social graph might.</p>\n</blockquote>\n<ul>\n<li>%1S7PrZmAAC3foX/aAIO0wRoaFnVG9xL3YMvnKwba4xQ=.sha256</li>\n</ul>\n<blockquote>\n<p>&quot;trust&quot; and &quot;reputation&quot; have no formal definition, and everyone &quot;already knows&quot; what they mean. sillicon valley has coopted the term &quot;reputation&quot; where it&#39;s something they calculate from their mass of data. in a human context, &quot;reputation&quot; is obviously subjective, although, to some degree an estimation of a collective sense of trust. In an honour-amoungst-theves sense, one community can esteeme someone highly, doesn&#39;t mean another community sees it like that. I have been meaning to try and write a glossary of ways people use the term &quot;trust&quot; and &quot;reputation&quot; because there are too many senses to agree on a definition. That WoT thing was just frustrating, for me, because everyone had a valid view, that was completely different.</p>\n</blockquote>\n<ul>\n<li>%Dwd9MKS1uD+yM1MeiiYLgYrTujtkrWoKHhV9bZzeQn0=.sha256</li>\n</ul>\n<h2 id=\"groups\">Groups</h2>\n<blockquote>\n<p>To summarize, our ideas are that a group, by definition has an inside and an outside, and they also may have internal behaviour and external behaviour. Internal behaviour means it&#39;s possible to communicate privately with other members, external behaviour means it&#39;s possible for the group to speak/act as one. I want it to be possible to follow a group like you would follow an individual, ideally without needing the ssb to treat it differently (that depends on the right crypto though)</p>\n<p>this thread has a <a href=\"%HRmMuXxv+4SzJkXVs+oy5K3PnEEi1kP8NOkID7auywc=.sha256\">good summary of our group ideas</a></p>\n</blockquote>\n<ul>\n<li>%b8/CYP0xj+fXgB2u5eDOQUbBCqyJ+sXv/CvuZNDOVVA=.sha256</li>\n</ul>\n","concepts/index.md":"<h1 id=\"concepts\">Concepts</h1>\n<p>This section is a collection of concepts that are useful to understand the scuttleverse.</p>\n<p>A lot of these are common to many of the current p2p database protocols, however there are important differences to keep in mind.</p>\n<h2 id=\"network-topology\">Network Topology</h2>\n<blockquote>\n<p>twitter implements a social network (decentralized network of friends and influencers) on a computer network with a different topology (data center hub and user spokes)</p>\n<p>Twister implement a social network (again, dexnet of friends &amp; followors) on a uniformly distributed decentralized network, user feeds distributed across a DHT (distributed hash table) and a blockchain (for user names) - twister is decentralized, but it&#39;s uniformly decentralized, each peer puts in roughly the same commitment of resources, which sounds like a good thing, sure.\nBut this means that twister is a decentralized implementation of a centralized idea, and thus conceputallly centralized.</p>\n<p>But secure-scuttlebutt is different, it maps a the social network on to a computer network that is essentially the same topology! that is, the connections between humans maps approximately to the the connections between computers. if you follow someone, you really actually follow them at the data layer.</p>\n<p>I feel this means the user experience is in harmony with the architecture of the system.</p>\n<p>I can&#39;t fairly claim that ssb isn&#39;t conceputally centralized right now, because there is only a small number of developers, but there is nothing in the architecture that prevents having many implementations - so if we succeed, I think that will happen.</p>\n</blockquote>\n<ul>\n<li>%lmELhGVLXcWrygyG0whgkzkmjlmiB1jZf5EshQ5zfhs=.sha256</li>\n</ul>\n<blockquote>\n<p>bittorrent/DAT like protocols are pretty good for moving heavy data. (video, OS images, etc) the best part is that you collaborate only with other peers who are invested in a particular dataset.</p>\n<p>But the weakness (in my opinion) is that they rely on a DHT.\nDHTs are bad because peers collaborate anonymously, you have cannot estimate their trustworthyness and consequently, DHTs tend to have poor privacy (because an adversary could easily add peers that monitor you) and poor sybil resistance (again, because you have no way to know that a peer is &quot;near you&quot; or &quot;on your side&quot;)</p>\n<p>This happens because work is distributed between peers uniformly.\nPeers are mapped into a hash ring, so to get a hash, you traverse peers closer and closer to your target.</p>\n<p>One of the core ideas in ssb is to map the computer network along the social network (thus defeating spam, because you arn&#39;t friends with spammers)</p>\n</blockquote>\n<ul>\n<li>%0asWjhFa51ri/OOSXJgC/aUweNzhxHi2/7+PXhwUzH8=.sha256</li>\n</ul>\n<h2 id=\"permissions\">Permissions</h2>\n<blockquote>\n<p>secure-scuttlebutt absolutely aims to grow into a pretty good decentralized database,\nbut because it&#39;s <em>decentralized</em> that means it&#39;s gonna turn out pretty different to say, mysql.</p>\n<p>The fundamental difference being that in a decentralized database, &quot;permissions&quot; are enforced by the reader, not the writer (or rather, receiver of the write - &quot;the database&quot;)</p>\n</blockquote>\n<ul>\n<li>%qn9zPU/d8021Cpv5/t7FFZv8eoUUDDOJ8xdhor5w+bA=.sha256</li>\n</ul>\n<blockquote>\n<p>This is the thing which is fundamentally different with this decentralized architecture than with centralized. In a centralized database, the database is the point of control. Who has permission to write what is determined by the database. In this decentralized architecture, if you want to write something, just write it. the other clients will decide whether that write was valid, and accept or ignore it.</p>\n</blockquote>\n<ul>\n<li>%KSSrusb3gQsRe6d3ZkKfiQTrGWM7OB1ePNEh6yzsA8I=.sha256</li>\n</ul>\n","concepts/link.md":"<h1 id=\"link\">Link</h1>\n<blockquote>\n<p>what I recall is @substack suggested &quot;cypherlink&quot; as the term for a hash used as a link (also called a merkle link in ipfs) which I liked because it sounded like a riff on &quot;hyperlink&quot; and &quot;cypherpunk&quot;. After that, &quot;cypherspace&quot; was pretty obvious.</p>\n<p>I was staying with @substack and @johnny at the time. The design I had planned was <a href=\"https://gist.github.com/dominictarr/5990143\">cyphernet</a> but switched to the secure-scuttlebutt design because it was simpler and had more predictable replication performance.</p>\n</blockquote>\n<ul>\n<li>%mMd+625YFJXxmtDDghUBiVR4jUIqHT+ynlFakBHSWlQ=.sha256</li>\n</ul>\n<p>Messages can reference three types of Secure Scuttlebutt entities: messages, feeds, and blobs (i.e. files). Messages and blobs are referred to by their hashes, but a feed is referred to by its signing public key.</p>\n<p>To indicate the type of ID, a &quot;sigil&quot; is prepended to the string. They are:</p>\n<ul>\n<li><code>@</code> for feeds</li>\n<li><code>%</code> for messages</li>\n<li><code>&amp;</code> for blobs</li>\n</ul>\n<p>Additionally, each ID has a &quot;tag&quot; appended to indicate the hash or key algorithm. Some example IDs:</p>\n<ul>\n<li>A feed: <code>@LA9HYf5rnUJFHHTklKXLLRyrEytayjbFZRo76Aj/qKs=.ed25519</code></li>\n<li>A message: <code>%MPB9vxHO0pvi2ve2wh6Do05ZrV7P6ZjUQ+IEYnzLfTs=.sha256</code></li>\n<li>A blob: <code>&amp;Pe5kTo/V/w4MToasp1IuyMrMcCkQwDOdyzbyD5fy4ac=.sha256</code></li>\n</ul>\n<p>When IDs are found in the messages, they may be treated as links, with the keyname acting as a &quot;relation&quot; type. An example of this:</p>\n<pre><code class=\"lang-shell\">sbot publish --type post \\\n  --root &quot;%MPB9vxHO0pvi2ve2wh6Do05ZrV7P6ZjUQ+IEYnzLfTs=.sha256&quot; \\\n  --branch &quot;%kRi8MzGDWw2iKNmZak5STshtzJ1D8G/sAj8pa4bVXLI=.sha256&quot; \\\n  --text &quot;this is a reply!&quot;\n</code></pre>\n<pre><code class=\"lang-javascript\">sbot.publish({\n  type: &quot;post&quot;,\n  root: &quot;%MPB9vxHO0pvi2ve2wh6Do05ZrV7P6ZjUQ+IEYnzLfTs=.sha256&quot;,\n  branch: &quot;%kRi8MzGDWw2iKNmZak5STshtzJ1D8G/sAj8pa4bVXLI=.sha256&quot;,\n  text: &quot;this is a reply!&quot;\n})\n</code></pre>\n<p>In this example, the root and branch keys are the relations. SSB automatically builds an index based on these links, to allow queries such as &quot;all messages with a root link to this message.&quot;</p>\n","concepts/local.md":"<h1 id=\"local\">Local</h1>\n<h2 id=\"hostless\">Hostless</h2>\n<p>Scuttlebutt is hostless: each computer installs the same copy of software and has equal rights in the network.</p>\n<p>While there are <a href=\"./pub.html\">public peer servers</a>, they are identical to the client peers rather than a special role. We feel that this doesn&#39;t make it not a peer to peer protocol, since anyone can run them, and your identity is not tied to them as in <code>email@domain</code>.</p>\n<h2 id=\"local-area-networks\">Local-Area Networks</h2>\n<p>Devices discover each other over the LAN with multicast UDP and sync automatically.</p>\n","concepts/message.md":"<h1 id=\"message\">Message</h1>\n<blockquote>\n<p>Patchwork is one particular interpretation of the ssb protocol. using patchwork you click buttons and type into fields and patchwork creates cryptographic messages which are replicated over ssb. These interpretations are <em>subjective</em>, currently, when I clicked &quot;follow&quot; on your account patchwork created a message that looked like <code>{type: &#39;contact&#39;, contact: @dust , following: true}</code>. currently, ssb reacts to that, and if someone I &quot;follow&quot; follows someone else, I replicate that someone else too, making their data more available. This is considered a favor to that feed, and the friend who followed.\nYou can change this sort of behavior without changing the wire protocol. Clients could publish whatever they want, and interpret another message however they want. The meaning is created when two peers have the same interpretation. You don&#39;t get to choose how someone interprets you, but you may choose how you interpret them. Lets call this &quot;freedom of interpretation&quot;?</p>\n</blockquote>\n<ul>\n<li>%RqH7UzDJNhKbu+LNGIe9eRrbSIGTybVb1ZZ6n+593tc=.sha256</li>\n</ul>\n<p>Each message contains:</p>\n<ul>\n<li>A signature</li>\n<li>The signing public key</li>\n<li>A content-hash of the previous message</li>\n<li>A sequence number</li>\n<li>A timestamp</li>\n<li>An identifier of the hashing algorithm in use (currently only &quot;sha256&quot; is supported)</li>\n<li>A content object</li>\n</ul>\n<p>Here&#39;s an example message:</p>\n<pre><code>{\n  &quot;previous&quot;: &quot;%26AC+gU0t74jRGVeDY013cVghlZRc0nfUAnMnutGGHM=.sha256&quot;,\n  &quot;author&quot;: &quot;@hxGxqPrplLjRG2vtjQL87abX4QKqeLgCwQpS730nNwE=.ed25519&quot;,\n  &quot;sequence&quot;: 216,\n  &quot;timestamp&quot;: 1442590513298,\n  &quot;hash&quot;: &quot;sha256&quot;,\n  &quot;content&quot;: {\n    &quot;type&quot;: &quot;vote&quot;,\n    &quot;vote&quot;: {\n      &quot;link&quot;: &quot;%WbQ4dq0m/zu5jxll9zUbe0iGmDOajCx1ZkLKjZ80JvI=.sha256&quot;,\n      &quot;value&quot;: 1\n    }\n  },\n  &quot;signature&quot;: &quot;Sjq1C3yiKdmi1TWvNqxIk1ZQBf4pPJYl0HHRDVf/xjm5tWJHBaW4kXo6mHPcUMbJYUtc03IvPwVqB+BMnBgmAQ==.sig.ed25519&quot;\n}\n</code></pre>","concepts/private-message.md":"<h1 id=\"private-message\">Private Message</h1>\n<p>For private sharing, Scuttlebot uses <a href=\"http://doc.libsodium.org/\">libsodium</a> to encrypt confidential log-entries. Feed IDs are public keys, and so once two feeds are mutually following each other, they can exchange confidential data freely.</p>\n<p>Private-box is a format for encrypting a private message to many parties. It is designed according to the <a href=\"https://github.com/crypto-browserify/crypto-browserify/issues/128\">audit-driven crypto design process</a>. You can find the repository on at <a href=\"https://github.com/auditdrivencrypto/private-box\">github:dominictarr/private-box</a></p>\n<blockquote>\n<p>When you want a message to be private, it is encrypted end-to-end with private-box\nSo gossipers will still see the cyphertext of your message, but will not see the plaintext. best of all, the recipients (including the number of recipient!) is also encrypted, so a patchwork private message leakes much less metadata than GPG. (it&#39;s obviously a message for someone in the network, but there is no clues who*)</p>\n<ul>\n<li>Excepting timing information. To obsecure timing information, you&#39;d post messages randomly and relay encrypted sends. Doable, but quite a niche, will leave this for later, once more people are using the system.</li>\n</ul>\n</blockquote>\n<ul>\n<li>%3Chqm1eynYg1ECCqyAgZLZPHspGpLQQTMiS1a3yW81o=.sha256</li>\n</ul>\n<h2 id=\"metadata-privacy\">Metadata Privacy</h2>\n<blockquote>\n<p>annomizing the recipient&#39;s identity is essential to have decent privacy.\nThe thing is the metadata is much easier to analyze than the content. Lets say I send a message &quot;ES6 is a cancer&quot; - any plaintext prose like this has a myriad of interpretations - it doesn&#39;t mean I have cancer. If I send a bunch of messages to a doctor who is a cancer expert... uh, probably I wouldn&#39;t do that unless I had cancer. To analyze the content, you kinda need a human who can interpret the context. very expensive. But analyzing the metadata graph is very easy. That is why in all the snowden stuff, they hardly analyze the content at all.</p>\n<p>The approach you are suggesting is to show the recipient, but allow the recipient to wear a mask. and just change masks rapidly. I&#39;m not ruling out whether this could be made to work - but it would be a lot harder to prove that it works, where as if we encrypt the &quot;to&quot; field we can examin the cryptographic part of the protocol and convince our selves: yup, no way to tell who the recipient is.</p>\n<p>regards the replay attack: it would actually be pretty simple to prevent. we just have to introduce something so that a message does not decrypt correctly in a different context. currently, a private-box message has a nonce at the start which is used in all the encryptions in that message. If I copied that whole message it would be the same, but if it worked a different way: instead of using the random nonce - use a hmac of hmac(author + previous, random_nonce) then that the same content copied into another message would now not decrypt. no surprising replays.</p>\n</blockquote>\n<ul>\n<li>%lgiAaiHPnz+/+B5K7v3nPR/sK/FBlCRb0qiIuvr6ims=.sha256</li>\n</ul>\n","concepts/pub.md":"<h1 id=\"public-peers-aka-pubs-\">Public Peers, aka &quot;Pubs&quot;</h1>\n<p>To sync across the Internet, &quot;Pub&quot; nodes run at public IPs and follow users. They are essentially mail-bots which improve uptime and availability.</p>\n<p>The Scuttlebot community runs some Pubs, and anybody can create and introduce their own.</p>\n<h2 id=\"invite-tokens\">Invite tokens</h2>\n<p>Tokens which may be used to command specific Pub servers to follow a user. These are used to join Pubs.</p>\n<h2 id=\"introducers\">Introducers</h2>\n<p>TODO</p>\n<blockquote>\n<p>an essential part of the idea with pubs was to use them as introducers like this. needing a signalling server for introductions seems centralizing, but if that service is generic and people have a reason for running them (as pubs have already demonstrated - already more people than we expected have decided to run pubs) then that service becomes decentralized.</p>\n</blockquote>\n<ul>\n<li>%N0RwDBKvfNuNtW9cDT40dsKdctfRFdRnzdSlBI6xlfI=.sha256</li>\n</ul>\n","concepts/stream.md":"<h1 id=\"stream\">Stream</h1>\n<blockquote>\n<p>you can think of an array as a structure that you move past... like one of those fancy old libraries with the moving ladder. You move to the position the data is in, and the data stays put. A stream is more like a conveyer belt. You stay in one place, and the data comes to you. You just control fast it comes. It&#39;s a more restricted idea than the array, because with an array you can move backwards and forwards, but a stream can only pause or move forward (or abort)</p>\n</blockquote>\n<ul>\n<li>%EkBhkSOAyuNpqLNGx1qW916/quYbZQ2yf5erHgxRMHc=.sha256</li>\n</ul>\n","concepts/view.md":"<h1 id=\"view\">View</h1>\n<blockquote>\n<p>@bobhaugen you could certainly put those messages into ssb logs, although, there the definition of &quot;single document&quot; is weaker. For example, this thread is represented across your log, @paul&#39;s log and my log. Each message in the thread points back to the previous message it is acknowledging. You could consider that tree a &quot;document&quot; at a level above the logs.</p>\n<p>I don&#39;t think what you are describing is particularily heavy and would necessarily be a problem in the logs - we already use it for such frivolous things as posting gifs and &quot;likes&quot;. Although, I&#39;m imagining the amount of contracts a normal person enters into - other organizations, like companies - might do a huge amount and so some way of compacting that may be good.</p>\n</blockquote>\n<ul>\n<li>%iqlUsaRIiHNz6xqf5VF3Bm52S1PA9+xMm7SGCe06HpE=.sha256</li>\n</ul>\n","faq/index.md":"<h1 id=\"faq\">FAQ</h1>\n<p><em>Common questions about scuttlebutt, ssb, all the patches, and the scuttleverse in general.  If you don&#39;t know what any of that previous sentence meant, this is the place to learn!</em></p>\n<hr>\n<ul>\n<li><a href=\"faq/basics/basics.md\"> Basics</a><ul>\n<li><a href=\"basics/patchwork-vs-scuttlebutt.md\">What is Patchwork and Scuttlebutt?</a></li>\n<li><a href=\"basics/pub.md\">What is a pub?</a></li>\n<li><a href=\"basics/multiple-pubs.md\">Should I follow multiple pubs?</a></li>\n<li><a href=\"basics/gossip.md\">Scuttlebutt  works through gossip?</a></li>\n<li><a href=\"basics/data-live.md\">Where does all my data live?</a></li>\n<li><a href=\"basics/size.md\">How much space will Scuttlebutt use?</a></li>\n<li><a href=\"basics/delete.md\">What happens if I delete everything?</a> </li>\n</ul>\n</li>\n<li><a href=\"applications/applications.md\">Applications</a><ul>\n<li><a href=\"applications/patchwork-and-patchbay.md\">How do posts work across apps?</a></li>\n<li><a href=\"applications/moving-ssb-apps.md\">Can I switch apps easily?</a></li>\n<li><a href=\"applications/multiple-devices.md\">Can I post  from different devices?</a></li>\n<li><a href=\"applications/patchwork-markup.md\">Is there a markdown guide for patchwork?</a></li>\n</ul>\n</li>\n<li><a href=\"channels/channels-index.md\">Channels</a><ul>\n<li><a href=\"channels/channels.md\">What are channels?</a></li>\n<li><a href=\"channels/channel-sort.md\">Are Channels sorted in any order?</a> </li>\n<li><a href=\"channels/channel-messages.md\">How do channel descriptions work?</a></li>\n<li><a href=\"channels/channel-find.md\">How do I find a channel?</a></li>\n</ul>\n</li>\n<li><a href=\"misc/concepts.md\">Misc</a><ul>\n<li><a href=\"misc/cool.md\">This seems really cool?</a></li>\n<li><a href=\"misc/faq-credits.md\">Who wrote this FAQ?</a></li>\n<li><a href=\"misc/help.md\">How can I help?</a></li>\n</ul>\n</li>\n</ul>\n","guides/cli-first-steps.md":"<h1 id=\"first-steps-with-sbot-a-command-line-tool-for-scuttlebutt\">First steps with sbot, a command line tool for Scuttlebutt</h1>\n<p>I&#39;m new to Scuttlebutt and Patchwork, and writing this as I start to explore its possibilities with the sbot command line tool. Feel free to respond with any suggestions or questions. My interest in Scuttlebutt was piqued by <a href=\"@QlCTpvY7p9ty2yOFrv1WU1AE88aoQc4Y7wYal7PFc+w=.ed25519\">@andrestaltz</a>&#39;s post, <a href=\"https://staltz.com/an-off-grid-social-network.html\">An Off-Grid Social Network</a>, especially how the decentralized, peer-to-peer architecture works to support offline use and avoids reliance on any servers with special authority.</p>\n<p>Scuttlebutt applications depend on a <em>server</em> component that maintains the connection with the Scuttlebutt network. Many Scuttlebutt applications, including Patchwork, use <a href=\"https://github.com/ssbc/scuttlebot\">Scuttlebot</a> in this role as a server, and interact with the Scuttlebutt network via Scuttlebot. The first time you run Scuttlebot (or an application using it), an identity is created (in the form of a public and private key pair) and this identity is used by all applications that communicate via Scuttlebot.</p>\n<p><strong>sbot</strong> is a command line tool included with Scuttlebot. To install it, install the <em>scuttlebot</em> Node.js package globally by running:</p>\n<pre><code>npm install --global scuttlebot\n</code></pre><p>This should let you run <em>sbot</em> on the command line. Let&#39;s start by using <strong>whoami</strong> to verify that sbot can connect to a Scuttlebot server and has the right identity.</p>\n<p>If you are connected to the Scuttlebutt network, this command should return a user ID. For example, this shows running <em>sbot whoami</em> and it returning my user ID:</p>\n<pre><code>$ sbot whoami\n{\n  &quot;id&quot;: &quot;@btxEYD1gibOZZKbtxJFTQ2m560U3zIgbZ2vII93WCIk=.ed25519&quot;\n}\n</code></pre><p>If you are not connected to the network, you will see an error message like this:</p>\n<pre><code>$ sbot whoami\nError: Could not connect to the scuttlebot server.\nUse the &quot;server&quot; command to start it.\n</code></pre><p>To connect to the network, you can either start Patchwork or another application that uses Scuttlebot, or run <em>sbot server</em>, which starts the server component.</p>\n<p>On the Scuttlebutt network, each user has a <em>feed</em> or <em>log</em> made up of messages signed by the user. Only the user can write to their feed, since only the user should possess the identity&#39;s private key and be able to sign messages with it. Users interact with each other by publishing messages on their own feed that mention users, establish a <em>follow</em> link with another user, or link to the message of another user.</p>\n<p>Let&#39;s use the <strong>latestSequence</strong> command to find how many items are in my feed. For example, this shows running <em>sbot latestSequence</em> with one argument (my user ID) and it returning the last sequence number in my feed and the timestamp of this item:</p>\n<pre><code>$ sbot latestSequence &quot;@btxEYD1gibOZZKbtxJFTQ2m560U3zIgbZ2vII93WCIk=.ed25519&quot;\n{\n  &quot;sequence&quot;: 24,\n  &quot;ts&quot;: 1491624622201\n}\n</code></pre><p>Using JavaScript, I can convert this timestamp into a localized date to verify that this was the date and time of my last message:</p>\n<pre><code>$ echo &quot;console.log(new Date(1491624622201).toLocaleString());&quot; | node\n4/7/2017, 11:10:22 PM\n</code></pre><p>Next, let&#39;s use the <strong>createUserStream</strong> command to retrieve items from my feed. This command has many options, including a mode to perform a full retrieval of the feed and a <em>live</em> mode where messages appear in real-time as they arrive.</p>\n<p>With the <em>limit</em> argument, we can retrieve the first item from my feed. For example:</p>\n<pre><code>$ sbot createUserStream --id &quot;@btxEYD1gibOZZKbtxJFTQ2m560U3zIgbZ2vII93WCIk=.ed25519&quot; --limit 1\n{\n  &quot;key&quot;: &quot;%S/nfXzDK3waYEaEDwwGA7FsIqFzpIiU3200Lf0aG/Ps=.sha256&quot;,\n  &quot;value&quot;: {\n    &quot;previous&quot;: null,\n    &quot;author&quot;: &quot;@btxEYD1gibOZZKbtxJFTQ2m560U3zIgbZ2vII93WCIk=.ed25519&quot;,\n    &quot;sequence&quot;: 1,\n    &quot;timestamp&quot;: 1491533348827,\n    &quot;hash&quot;: &quot;sha256&quot;,\n    &quot;content&quot;: {\n      &quot;type&quot;: &quot;about&quot;,\n      &quot;about&quot;: &quot;@btxEYD1gibOZZKbtxJFTQ2m560U3zIgbZ2vII93WCIk=.ed25519&quot;,\n      &quot;name&quot;: &quot;arithmetric&quot;\n    },\n    &quot;signature&quot;: &quot;B/I1k24ihHsivqzo+G01M/rqQWCIC8YYlt7+EiKoovdd1C36b8/RU+DgFO80lzNNPWWakgh9K+vY2hdslelMAQ==.sig.ed25519&quot;\n  }\n}\n</code></pre><p>Notice that the <em>sequence</em> value is 1 and the <em>previous</em> value is null. Also, this is an <em>about</em> type message made with Patchwork that identifies my user ID with the name <em>arithmetric</em>.</p>\n<p>By adding the <em>reverse</em> argument to the <em>sbot createUserStream</em> command, we can retrieve the last item from my feed. For example:</p>\n<pre><code>$ sbot createUserStream --id &quot;@btxEYD1gibOZZKbtxJFTQ2m560U3zIgbZ2vII93WCIk=.ed25519&quot; --limit 1 --reverse\n{\n  &quot;key&quot;: &quot;%hl3+i0yaWRo2DG11VdpQhXx/ol2lbf73W9rdHbiaV5c=.sha256&quot;,\n  &quot;value&quot;: {\n    &quot;previous&quot;: &quot;%rQ6UTukySj3b3igS0M4FTBB/H/VmM3U8Z6gwtp3v4iY=.sha256&quot;,\n    &quot;author&quot;: &quot;@btxEYD1gibOZZKbtxJFTQ2m560U3zIgbZ2vII93WCIk=.ed25519&quot;,\n    &quot;sequence&quot;: 24,\n    &quot;timestamp&quot;: 1491624622198,\n    &quot;hash&quot;: &quot;sha256&quot;,\n    &quot;content&quot;: {\n      &quot;type&quot;: &quot;contact&quot;,\n      &quot;contact&quot;: &quot;@FbGoHeEcePDG3Evemrc+hm+S77cXKf8BRQgkYinJggg=.ed25519&quot;,\n      &quot;following&quot;: true\n    },\n    &quot;signature&quot;: &quot;p8ekEHID8uqomyXyPUssHtjrGGKxJleU4waqHm9mPwA6WHLu4jAIG0+uoLPsJ/LkXUAMK1Jub9qC33ib6btpCQ==.sig.ed25519&quot;\n  }\n}\n</code></pre><p>This message has a <em>sequence</em> value of 24, which matches the last sequence number from the <em>latestSequence</em> command above. This message is the <em>contact</em> type with <em>following</em> set to true, so it is the message recording my action to follow the user in the <em>contact</em> field.</p>\n<p>Now, let&#39;s use the <strong>get</strong> command to get the message previous to the last one. The <em>sbot get</em> command accepts one argument, the message ID. For example, this shows running get with the message ID in the previous field above and the message response:</p>\n<pre><code>$ sbot get &quot;%rQ6UTukySj3b3igS0M4FTBB/H/VmM3U8Z6gwtp3v4iY=.sha256&quot;\n{\n  &quot;previous&quot;: &quot;%jhaGHJiDINuSp1gr6nHbxhB9BCW9HIPtGR3ntdN3EWM=.sha256&quot;,\n  &quot;author&quot;: &quot;@btxEYD1gibOZZKbtxJFTQ2m560U3zIgbZ2vII93WCIk=.ed25519&quot;,\n  &quot;sequence&quot;: 23,\n  &quot;timestamp&quot;: 1491611316858,\n  &quot;hash&quot;: &quot;sha256&quot;,\n  &quot;content&quot;: &quot;cZOlfY2YQBMqIKkX7zKwnlZ8eC2gElbmk2HOoXGW/tkYberzSW3k3rw1XJxuJKavmSHNCF9e4hWVCueIFa2ibFOxxkuEy13rYk1YGmWj4xgxx1Vv4hUuLIsdeRM50XH+7OTkAejkc2pu+4NYXZDbmuINX8djUrddjwq3VDUbk...&quot;,\n  &quot;signature&quot;: &quot;gYceZ6gv7Kd2L78uCYsEwro/q8Y+BNSyeNoSshtIbfN4T6ZZ3bz5JyU8qt/q4ecNSaSjj1pxaGM+UQ9NOsdQDQ==.sig.ed25519&quot;\n}\n</code></pre><p>Notice that the content value is not a JSON object. This is an example of an encrypted private message. Since this private message is in my feed, I can decrypt it with the <strong>private.unbox</strong> command. For example, this shows running this command with the encrypted value and receiving the decrypted JSON message content:</p>\n<pre><code>$ sbot private.unbox &quot;cZOlfY2YQBM...&quot;\n{\n  &quot;type&quot;: &quot;post&quot;,\n  &quot;text&quot;: &quot;hello world! this is a test encrypted message&quot;,\n  &quot;mentions&quot;: [],\n  &quot;recps&quot;: [\n    &quot;@btxEYD1gibOZZKbtxJFTQ2m560U3zIgbZ2vII93WCIk=.ed25519&quot;\n  ]\n}\n</code></pre><p>That&#39;s just a brief introduction to the Scuttlebutt network using the sbot command line tool. For more information, check out the <a href=\"https://ssbc.github.io/scuttlebot/api.html\">API/CLI reference</a> and the <a href=\"https://ssbc.github.io/secure-scuttlebutt/\">Secure Scuttlebutt</a> protocol overview.</p>\n","guides/index.md":"<h1 id=\"guides\">Guides</h1>\n<p>This section is a collection of guides that are useful to introductions for Scuttlebutt applications and tools.</p>\n<ul>\n<li><a href=\"./cli-first-steps.md\">First steps with sbot, a command line tool for Scuttlebutt</a></li>\n<li><a href=\"https://cblgh.org/ssb.txt\">A link collection of ssb resources, clients and pubs</a></li>\n</ul>\n","stories/design-challenge-avoid-centralization-and-singletons.md":"<h1 id=\"design-challenge-avoid-centralization-and-singletons\">Design Challenge: Avoid Centralization and Singletons</h1>\n<p>SecureScuttlebutt goes out of its way to avoid both centralization and singletons.</p>\n<h2 id=\"avoiding-centralization\">Avoiding Centralization</h2>\n<p>The danger of centralization is obvious: it creates a single point of failure that can easily be attacked, or act as an attacker.\nAnd, it creates a monoculture of information, as the central point starts to control <a href=\"using-trust-in-open-networks.md\">what information is trusted, or ranked highly</a>.</p>\n<p>To avoid centralization, you make every peer the same.</p>\n<p>Due to limitations inherent in the modern Internet, this is hard to do.\nHome routers perform Network Address Translation to make a single IP address behave like many, which makes it simple to make outgoing connections, but difficult to receive incoming connections.</p>\n<p>Most networked applications, including SSB, solve this by connecting to publicly addressable servers.\nSometimes P2P systems use clever techniques (<a href=\"http://en.wikipedia.org/wiki/Traversal_Using_Relays_around_NAT\">TURN</a>, <a href=\"http://en.wikipedia.org/wiki/STUN\">STUN</a>, <a href=\"http://en.wikipedia.org/wiki/Interactive_Connectivity_Establishment\">ICE</a>) to reduce the role of the servers, but it&#39;s still necessary to have them.</p>\n<p>SSB uses the so-called &quot;Pub&quot; servers to rehost the feeds and blobs of the users, which has the added benefit of improving network availability (two peers don&#39;t need to be online at the same time to exchange messages).\nHowever, amongst the community, they&#39;re considered a centralization risk.</p>\n<p>We mitigate the risk by avoiding putting any special authority or trust in the Pubs.\nUsers may be hosted by many pubs at once, and can change pubs without losing the data or identity.\nA pub server may go down, and others will still provide service.</p>\n<p>Contrast this with email servers, which are ostensibly decentralized (you may run your own email server) but you must have <em>exactly one</em> email server, and if it is down you will not receive email, which makes running your own email server a considerable hassle (not to mention handling spam).</p>\n<h2 id=\"avoiding-singletons\">Avoiding Singletons</h2>\n<p>SecureScuttlebutt also avoids P2P structures that represent singletons - specifically, it avoids using a <a href=\"http://en.wikipedia.org/wiki/Distributed_hash_table\">Distributed Hash Table</a> or a <a href=\"http://en.wikipedia.org/wiki/Bitcoin#Block_chain\">global blockchain</a>.</p>\n<p>SSB avoids P2P singletons partially to show that it can be done (most P2P designs use DHT or global blockchains) and also because those are just P2P versions of centralized systems.\nSocial Networks are already constructed around a decentralized experience.\nPopular social networks (fb, twitter) have centralized implementations, but you use them to interact with your <em>peers</em>, so on that level they are P2P.</p>\n<p>SecureScuttlebutt takes this decentralized experience and maps the networking layer (the key part of the implementation) on top of the decentralized human/user network.\nIt would be a shame to go to all that trouble to decentralize, but then adopt a singleton.\nAlso, global blockchains are heavy (require nodes to store entire chain, and to waste CPU power) and DHTs are susceptible to spam.\nThese structures also both make the network unprivate, by making all information available globally.</p>\n<p>That said, like any good tool, SSB has been built to interoperate with other programs.\nThough it&#39;s important to us that core remain viable without singletons, the community is free to add protocols wherever they see fit, and is encouraged to do so.</p>\n","stories/design-challenge-sybil-attacks.md":"<h1 id=\"design-challenge-sybil-attacks\">Design Challenge: Sybil Attacks</h1>\n<p>If it is possible for an anyone to connect to a computer system then it may be possible to interfere with the operation of that system, and defenses against interference must be designed in.</p>\n<p>For example, email&#39;s design is vulnerable to spam.\nTo send someone an email, all that is required is to have their email address; email is unsolicited messaging, so it&#39;s easy to send nuisance or fraud emails.</p>\n<h3 id=\"spam-filters\">Spam Filters</h3>\n<p>Email systems deal with spam by filtering it out.\nThere are two basic approaches:\nThe simplest is <em>pattern matching</em> - messages are compared to models of the sort of messages that spammers send.\nThis produces an arms race between spammers and spam filterers.\nSpammers must strive to create messages which beat the filter, while filterers have to improve their model.</p>\n<p>One particularly interesting example of this is (snail) mail advertisers that employ <a href=\"http://www.writeonresults.com/\">handwriting services</a> to write the addresses on their envelopes.\nThis fools the receiver into believing that an actual human sent them the letter making them much more likely to open it. \n(This is even being <a href=\"https://hellobond.com/\">automated</a>.)</p>\n<h3 id=\"social-networks\">Social Networks</h3>\n<p>The other approach is to use social/trust networks.\nServices like Facebook or Twitter are significantly less vulnerable to spam (if you dont consider the ads spam).\nInstead of receiving personal messages from anyone one who knows your id/address on a social network, you only receive messages from other users you have &quot;followed&quot; or &quot;friended&quot;.</p>\n<p>We like to call this a &quot;Solicited Spam&quot; system.\nFollowing someone on Twitter means you think they are human, or at least, an amusing bot.\nThis is actually a pretty strong signal.\nEmail doesn&#39;t have an explicit social network, but the best spam filtered email systems (like gmail) can use the implicit social network in email: if I send you and email and you reply then we are &quot;friends&quot;.</p>\n<p>Then graph analysis can be applied to the friend network - spammers may be isolated, or clustered together and can be filtered out.</p>\n<p>By building SecureScuttlebutt around a social network, preventing spam becomes easy.\nSince, in a social network application, you only communicate with trusted peers (friends) anyway, and there is usually an explicit &quot;follow&quot; mechanism which expresses who you trust, and humans are pretty good at detecting frauds.\nThis is why SSB was made as an inherently social system.</p>\n","stories/gossiping-securely-is-the-new-email.md":"<h1 id=\"gossiping-securely-is-the-new-email\">Gossiping Securely is the new Email</h1>\n<p><img src=\"../assets/people_gossiping.png\" alt=\"people_gossiping\"></p>\n<p>If you’re still using email for direct communication, you’re probably facing some well known problems : spam, provider lockin, privacy, and reliability (doesn’t work without the internet).</p>\n<p>I’ve helped build an app called Patchwork which sidesteps these problems. Patchwork is built on an open gossip network. Here’s how it works:</p>\n<ul>\n<li>In the network everyone has a diary which only they can write to.</li>\n<li>When you bump into a friend, you can make a photocopy of their diary.</li>\n<li>To send a message to a friend, I leave a message in my diary and scramble (encrypt) the words using a code only that friend can read.</li>\n<li>When I read my friends diaries, any scrambled message I can decode must have been for me, any I can’t must have been meant for someone else.</li>\n</ul>\n<blockquote>\n<p>That sounds a bit complicated!</p>\n</blockquote>\n<p>It does, but the good news is you don’t need to know any crypotogrpahy, you can just install Patchwork, and it works like email.\nIt looks like this at the moment:</p>\n<p><img src=\"../assets/secure_message_example.png\" alt=\"secure_message_example\">\n<em>Direct messaging in Patchwork</em></p>\n<p>Oh, other good news is that your intuition how information is passed by gossip pretty much translates to Patchwork:</p>\n<ul>\n<li>you gossip with friends (and sometimes friends of friends)</li>\n<li>you don’t gossip with people your friends don’t trust</li>\n<li>you gossip about mutual friends</li>\n</ul>\n<p>The major exception is that unlike people-gossip, this gossip is cryptographically 99.9999999% impossible to fake.</p>\n<blockquote>\n<p><strong>It’s like all the good things about gossip, with all the bad things like misinformation taken out.</strong></p>\n</blockquote>\n<p>This setup eliminates spam and abusive actors, because over time no-one will talk with them, and hence their messages are not passed on.\nBecause the system is built on gossip, you don’t need to be on the internet to do it. Whenever you’re on the same wifi as a friend your computers will gossip. Patchwork will also swing by known ‘pubs’ (like public houses on the internet) and catch up on gossip there.\nThe network doesn’t need a central provider, so you can’t be locked into some corporation.\nThe direct messages are all hardcore encrypted by default and unlike encrypted email, no-one can even tell who you were messaging.</p>\n<p><img src=\"../assets/gossip_graph.png\" alt=\"gossip_graphj\"></p>\n<p><em>A view of the network — I’m the purple node, the others are Peers (green = gossiping). Large nodes are pubs on the net.</em></p>\n<h2 id=\"what-are-the-downsides-\">What are the downsides?</h2>\n<p>Patchwork is currently only built for desktops and laptops (no phones). .\nThe setup is also such that you have one identity per device — this means you have to have different identities for each computer you have. This problem is less of a challenge, and is also on our roadmap.</p>\n<p>Patchwork is currently in closed beta. We use Patchwork to build Patchwork, and have a small but active social network (you can also gossip publicly). \nIf you’d like to help us build this future, we’d love help from storytellers, designers, entrepreneurs, and coders.\nWe think we could be of great services to journalists, activists, and people without internet.\nPlease feel free to get in touch if you’d like to join us — mix@enspiral.com</p>\n","stories/index.md":"<h1 id=\"scuttlebutt-stories\">Scuttlebutt Stories</h1>\n<p>A collection of stories and story fragments about ssbc patterns (technological and social)</p>\n<h2 id=\"published\">Published</h2>\n<ul>\n<li><a href=\"./gossiping-securely-is-the-new-email.md\">Gossiping Securely is the new Email</a> (<a href=\"https://medium.com/enspiral-tales/gossiping-securely-is-the-new-email-6d706d4cd435\">Medium</a>)</li>\n<li><a href=\"http://hyper.mixmix.io/mixmix/blogposts/blob/master/uncapturable_distribution.md\">Uncapturable Distribution</a> (Hypermarkdown - experiemental)</li>\n</ul>\n<h2 id=\"unpublished\">Unpublished</h2>\n<ul>\n<li><a href=\"./design-challenge-avoid-centralization-and-singletons.md\">Design Challenge: Avoid Centralization and Singletons</a></li>\n<li><a href=\"./design-challenge-sybil-attacks.md\">Design Challenge: Sybil Attacks</a></li>\n<li><a href=\"./scuttlebutt-genesis.md\">Scuttlebutt Genesis</a></li>\n<li><a href=\"./using-trust-in-open-networks.md\">Using Trust in Open Networks</a></li>\n</ul>\n<h2 id=\"ideas\">Ideas</h2>\n<ul>\n<li>The cloud as you know it is not free</li>\n</ul>\n","stories/scuttlebutt-genesis.md":"<h1 id=\"-scuttlebutt-genesis-lqixi2tejveyqcirevuancde2u-7h0rjnvmjphewlga-sha256-\"><a href=\"%lQIxi2TEjvEyqcIREVUaNcDe2u+7H0RJNVMJpHEwLgA=.sha256\">Scuttlebutt Genesis</a></h1>\n<p>@bobhaugen hey, I first became interested in p2p a few years back. I was a bit burnt out from the previous job and was living in a sailboat in a swamp in Auckland, NZ. Playing around with frontend code (because I usually did backend) I realized that there was a disconnect between the way that frontend works (change events moving between layers) and backend (request/response to the database) why couldn&#39;t it all be change events?</p>\n<p>Then I realized that git essentially modeled change events, and that a system based on replication would work really well offline because you&#39;d have a valid copy of the data always at hand (pretty useful in a sailboat). So i started looking into git and implemented a replication prototype <a href=\"https://github.com/dominictarr/snob\">https://github.com/dominictarr/snob</a> I spoke about this at my local javascript meetup and got a very enthusiastic response! I hadn&#39;t had a good response for one of my &quot;crazy&quot; ideas before, so I decided I should just work on that and see where it took me.</p>\n<p>Important influences here where the amazon dynamo paper, CRDTs, git and couchdb. Couchdb&#39;s most interesting feature is the changes feed which allows you to &quot;tail&quot; the database and synchronize changes. I don&#39;t think couchdb&#39;s replication is very good, but it still raised the bar.</p>\n<p>After a while my experiments distilled into <a href=\"https://github.com/dominictarr/scuttlebutt\">https://github.com/dominictarr/scuttlebutt</a> which should now be called &quot;insecure scuttlebutt&quot;. That work got me invited to speak at conferences, particularily one in Ireland, nodedublin (now nodeconf.eu). nearform (organizers of nodedublin) where also interested in in database replication, I started working with them to develop a new replicatable database product.\nIn the end, nearform pivoted away from that idea, but everything I had done was opensource and that introduced me into leveldb, and learned me a lot about databases.</p>\n<p><a href=\"https://camlistore.org/\">Camlistore</a> was an important influence - it is immutable, with hashes for keys, but you can query the database with search instead of the keys, which overcomes awkwardness of not being able to choose the keys.</p>\n<p>I didn&#39;t like camlistore&#39;s replication protocol. It was too batch-mode, and not particularily efficient. I did some <a href=\"https://github.com/dominictarr/merkle-stream\">experiments looking for a general purpose replication protocol</a> but decided it wasn&#39;t possible. I saw cryptosphere which is a distributed filesystem project, but uses replicated logs to record which peers are cooperative, basically a trust network. <a href=\"https://github.com/cryptosphere/cryptosphere/wiki/Philosophy\">https://github.com/cryptosphere/cryptosphere/wiki/Philosophy</a>\nReplicating logs is easy, so that is good, but instead of building a boring filesystem on top of a trust network... why not just expose that directly to the humans? I realized that all the web2.0 apps are basically just replicated logs, and basically implicit trust networks, and that this was a particularily easy architecture to decentralize.</p>\n<p>What makes it easy is that since you more or less explicitly &quot;follow&quot; or &quot;friend&quot; people that defers the spam prevention to the humans in a way that seems natural. Contrast with email, where spam prevention is a messy soft-AI problem.</p>\n<p>This also dovetailed with earlier ideas about trust networks, that I didn&#39;t know how to persue at the time. For example, experts have reputations, and can teach or certify students, but are disincentiveized from misvouching because they will loose <em>their</em> reputation if thier students are found incompetent. This was while I was at university and felt that a degree stamped by the university didn&#39;t mean very much, and was also very restrictive in terms of subject matter etc. Building a decentralized trust network seemed like a very good idea. One of the key insights of web 2.0 is that users respond to UI, making them aware of an option means they can do it. Users and UI flow together. A certain UI design may influence user behavior, and this also works at higher layers, certain application technology influences possible applications and certain economic models influences business models. I had worked witnessed some terrible software in my day, but recoginized that it was terrible for social reasons more than technical... I seek more equitable social arrangements because I think it will create better software. Everything is becoming software right? so if more equitable circumstances produces <em>better software</em> then the good software can kill the bad software.</p>\n<p>By this time I had figured out the basic architecture and was starting to work on it. I had noticed @paul&#39;s work, and recoginized it&#39;s importantance as another part of the puzzle. I wanted an open platform that anyone could build things on (as twitter was originally pitched, but has closed off they try to monetize etc). Also, we couldn&#39;t realistically plan to just sit down and create an app that everyone wants to use, we need many experiments so that one can succeed, therefore we need an <em>decentralized application platform</em> more than we need any given a decentralized application.</p>\n","stories/using-trust-in-open-networks.md":"<h1 id=\"using-trust-in-open-networks\">Using Trust in Open Networks</h1>\n<p>Open networks are systems that allow participation without deferring to central authority.\nThe Web, Email, BitTorrent, IPFS, and SecureScuttlebutt are all open networks.</p>\n<p>Open networks try to maximise their potential value by letting agents contribute and extract data independently, and without intermediation.\nThis is the Laissez-faire approach to architecture, and it frequently benefits from the efficiency of <a href=\"https://en.wikipedia.org/wiki/Scalability#HORIZONTAL-SCALING\">horizontal scaling</a>.</p>\n<p>In SecureScuttlebutt, we have decided <a href=\"design-challenge-avoid-centralization-and-singletons.md\">never to adopt centralized authorities in the protocol</a>.\nThis decision was motivated by</p>\n<ol>\n<li>distrust of information monocultures</li>\n<li>desire to maximize autonomy of individual users</li>\n<li>general curiosity</li>\n</ol>\n<p>This constraint pushes us to find novel solutions for shared datastructures.\nThis article will summarize literature on trust-based mechanisms, and offer some perspective to how they can be applied to SecureScuttlebutt.</p>\n<hr>\n<p><strong>Trust-ranking is a key feature of open networks with shared data-structures.</strong>\nAs each agent receives new information, it must decide how to act on it, and decide whether to discard the input.\nSpam, resource-leaching, and DoS attacks would otherwise overwhelm the agents.</p>\n<p>Email is an open network: anybody can create a server and account.\nAnd, the inbox a shared structure: users share append-rights over each others&#39; inboxes.\nBut, without proper spam-filtering, email is nearly useless.\nFiltering must be both effective (very little spam) and accurate (<em>very</em> few false positives) or email loses its utility.</p>\n<p><a href=\"http://www.inf.ufsc.br/~gauthier/EGC6006/material/Aula%206/A%20survey%20of%20trust%20in%20computer%20science%20and%20the%20Semantic%20Web.pdf\">A survey of trust in computer science and the Semantic Web</a> names two primary means of managing trust.</p>\n<blockquote>\n<p><strong>Policy-based trust</strong>. Using policies to establish trust, focused on managing and exchanging credentials and enforcing access policies. Work in policy-based trust generally assumes that trust is established simply by obtaining a sufficient amount of credentials.</p>\n<p><strong>Reputation-based trust.</strong> Using reputation to establish trust, where past interactions or performance for an entity are combined to assess its future behavior. Research in reputation-based trust uses the history of an entity&#39;s actions/behavior to compute trust, and may use referral-based trust (information from others) in the absence of (or in addition to) first-hand knowledge.</p>\n</blockquote>\n<p>SecureScuttlebutt uses social &quot;following&quot; relations as a base trust-policy.\nUsers choose which feeds to follow, and therefore opt into every messaging partner.\nThis is how SSB controls spam.</p>\n<p>Other trust-policies could be leveraged by SSB applications, to give users authority over other shared data-structures.\nFor instance, users could assign friends the right to follow more users on their behalf, or give moderator powers to enable post-hiding.</p>\n<p><strong>However, policies scale poorly, as they require the user to make a decision about every other agent in the network.</strong>\nThis makes it hard for a user to evaluate information produced by &quot;strangers&quot;, even if the stranger is only one or two social hops away.\n<strong>To solve this, reputation-based trust can be introduced to build upon the user&#39;s decisions, by analyzing the decisions of other agents, and assigning authority <em>automatically</em>.</strong></p>\n<hr>\n<p>To understand reputation-based trust, let&#39;s look at a common application of them, search engines.\nPageRank is still one of the top search algorithms in use, so it&#39;s important to understand where it fits in the current landscape of research.</p>\n<p><a href=\"http://www2.informatik.uni-freiburg.de/~cziegler/papers/ISF-05-CR.pdf\">Propagation Models for Trust and Distrust in Social Networks</a> does a good job explaining PageRank&#39;s qualities, in section 2.\nFrom there, and from other papers:</p>\n<ul>\n<li>PageRank is a probabilistic analysis, of a random surfer clicking links through the Web. The common alternative is path-analysis, which is the sort of thing that PGP does in its WoT.<ul>\n<li><a href=\"https://homes.cs.washington.edu/~pedrod/papers/iswc03.pdf\">Trust Management for the Semantic Web</a> and <a href=\"http://ilpubs.stanford.edu:8090/562/1/2002-56.pdf\">The EigenTrust Algorithm for Reputation Management in P2P Networks</a> are two good papers on probabilistic analysis. Both of these try to generalize PageRank. Eigentrust is cited a lot by other papers.</li>\n<li><a href=\"http://www2.informatik.uni-freiburg.de/~cziegler/papers/ISF-05-CR.pdf\">Propagation Models for Trust and Distrust in Social Networks</a> is a good resource for path-analysis, as it explains Advogadro and a novel algorithm called Appleseed.</li>\n</ul>\n</li>\n<li>PageRank operates with global information, and seeks to be objective (everyone&#39;s opinion) instead of subjective (google&#39;s opinion). Google crawls the Web to get global knowledge of the graph.</li>\n<li>PageRank infers that links are recommendations from one page to another. That&#39;s usually a correct assumption, but not always. Semantic Web research tries to use richer signals (explicit recommendations of pages, ratings of trust between agents, ratings of belief in facts, etc) and then construct better analysis. </li>\n<li>PageRank relies on weblinks being transitive recommendations. The algorithm does <em>not</em> apply for recommendations that aren&#39;t transitive. For instance, inter-agent trust signals are not always transitive, and distrust signals are <em>never</em> transitive.</li>\n<li>Because PageRank creates global ratings for pages, it&#39;s actually estimating the global <em>reputation</em> of a page. Reputation is different from trust, because trust is subjective (from a particular node&#39;s perspective) and reputation is objective (from the whole network&#39;s perspective).</li>\n<li>Many algorithms, including Eigentrust and Advogato, rely on a seed set of trusted peers. The seed-set makes it possible to detect malicious rings that work together to elevate their rating. The original PageRank paper doesn&#39;t have any such seed-set, but in practice I imagine Google has an equivalent. (I question whether the analysis can be called &quot;objective&quot; if there is such a seed-set.)</li>\n</ul>\n<p>These lessons can easily apply when writing graph-analysis algorithms for SecureScuttlebutt.\nInferring the wrong properties about the input data, such as edge-transitivity, can lead the algorithm to draw wrong conclusions.\nAs the purpose of reputation is to <em>automate trust decisions</em>, it&#39;s important not to make those mistakes.</p>\n<p>The data model is also very important to reputation-based trust, and is frequently explored in the literature I found.\nThere is no consensus on which model is best; they vary by application and intent.</p>\n<p><a href=\"http://ilpubs.stanford.edu:8090/562/1/2002-56.pdf\">The EigenTrust Algorithm for Reputation Management in P2P Networks</a> applies probabilistic analysis on a dataset of rated transactions.\nAfter every file-download, users publish whether the downloaded file was as-advertised.\nThe ratings are accumulated and normalized to quantify the trustworthiness of peers.\nThe authors assume that trusted peers are likely to make good trust decisions as well, and so they use the trust-values transitively to fill holes in the dataset.\nAt a glance, <a href=\"http://eris.prakinf.tu-ilmenau.de/res/papers/security/damiani02reputationbased.pdf\">the XRep algorithm</a> seems to work in roughly the same way.</p>\n<p>Eigentrust is not a social system; it&#39;s a p2p mesh of file-hosts, which abstracts the hosts away from the user&#39;s awareness.\nTheir data model, therefore, doesn&#39;t use direct trust-ratings between agents, whereas SSB can.\nIn contrast, <a href=\"https://www.cs.umd.edu/~golbeck/pubs/Golbeck,%20Hendler%20-%202004%20-%20Accuracy%20of%20Metrics%20for%20Inferring%20Trust%20and%20Reputation.pdf\">the TrustMail algorithm</a> sets ratings directly on agents.</p>\n<p><a href=\"https://homes.cs.washington.edu/~pedrod/papers/iswc03.pdf\">Trust Management for the Semantic Web</a> splits the model into &quot;belief ratings for statements&quot; and &quot;trust ratings for agents&quot;</p>\n<blockquote>\n<p>[We] propose a solution to the problem of establishing the degree of belief in a statement that is explicitly asserted by one or more sources on the Semantic Web. ... Our basic model is that a user&#39;s belief in a statement should be a function of her trust in the sources providing it.</p>\n</blockquote>\n<p>They offer both path-algebra and probabilistic interpretations for the graph, and a number of options for the formulas.</p>\n<p><a href=\"http://ebiquity.umbc.edu/_file_directory_/papers/93.pdf\">Modeling and Evaluating Trust Network Inference</a> describes an even more sophisticated model.\nFirst, they isolate trust into domains, following the intuition that an agent may be an expert in one field, but not in another.\nThen, in section 2.4.2, they define 2 categories of trust, and subdivide them into 5 types.\nThe categories are <em>referral trust</em> (&quot;reflects an agent&#39;s estimation about the quality of the other agents&#39; knowledge&quot;) and <em>associative trust</em> (&quot;reflects the similarity between two agents&quot;).\nThe subdivisions are as follows:</p>\n<ul>\n<li>Domain Expert Trust (DET) is referral trust that evaluates the quality of an agent&#39;s domain knowledge. Intuitively, DET is not transitive, but DET may imply RET (see next item) on the same domain.</li>\n<li>Recommendation Expert Trust (RET) is referral trust that evaluates an agent&#39;s trust knowledge. In real world, the domain used in RET is often much wider than DET, e.g. CNN is a domain expert only in news area, while Google.com is a recommendation expert in almost any area. Moreover, RET in transitive according to its definition, so it can be used to propagate both DET and RET.</li>\n<li>Similar belief trust (SBT) is an associative trust that evaluates the similarity of two agents&#39; domain knowledge. Intuitively, SBT clusters information providers, and it can be used to propagate DET.</li>\n<li>Similar trusting trust (STT) is an associative trust that evaluates the similarity of two agents&#39; trust knowledge. Intuitively, STT clusters trustors (agents who maintain trust knowledge), and it can be used to propagate both DET and RET. Computing STT needs trust knowledge from only two agents.</li>\n<li>Similar cited trust (SCT) is an associative trust that evaluates the similarity of how two agents are trusted.  Intuitively, STT clusters trustees (agents who are trusted) by their reputation, and it can be used to propagate both DET and RET. Reliable SCT requires trust knowledge from a large population of agents.</li>\n</ul>\n<p>This is not the first group to separate DET and RET.\nThe <a href=\"https://en.wikipedia.org/wiki/Hilltop_algorithm\">Hilltop</a> and <a href=\"https://en.wikipedia.org/wiki/HITS_algorithm\">HITS</a> algorithms make that distinction as well.</p>\n<p>The values used to rate agents or data varies between the algorithms.\nRoughly, they tend to be trinary (trusted/distrusted/no-opinion) or real (0..1, or 0..10, etc).\nI&#39;ve found nothing definitive about which is best.</p>\n<p>When choosing the model, we should remember that reputation systems exist to rank information in the absense of local input.\nIf the user were able to rate all inputs a-priori, a policy system would suffice.\nSince the user can not, a reputation system merges the inputs of many users to fill holes in the data structure.</p>\n<p>If we want to entrust function-critical decisions to shared data, we need to be robust to malicious behaviors.\nThe <a href=\"http://www2.informatik.uni-freiburg.de/~cziegler/papers/ISF-05-CR.pdf\">Appleseed Paper</a> provides useful analysis of this:</p>\n<blockquote>\n<p>The &quot;bottleneck property&quot; [is] common feature of attack-resistant trust metrics. Informally, this property states that the &quot;trust quantity accorded to an edge <code>s -&gt; t</code> is not significantly affected by changes to the successors of t.&quot;</p>\n</blockquote>\n<p>Put another way, the bottleneck property holds if a voting ring is not able to elevate its reputation the network by recommending each other.\nThis property requires subjectivity: trust must flow outward from a seed set.\nFortunately, SecureScuttlebutt is subjective by nature.</p>\n<p>The other concern we must address is compromise-risk: we should minimize the danger of a trusted node acting maliciously.\nTwo techniques for handling this:</p>\n<ul>\n<li>Always distribute authority. A security-critical change should be backed by multiple trusted agents.</li>\n<li>Watch for anomolous events and alert the user. If a kind of change is rare, confirm it before accepting it.</li>\n</ul>\n<hr>\n<p>A few notes on how computation occurs.\nIn addition to the path-algebra vs probabilistic analysis, there&#39;s a split among the papers between making distributed vs centralized/localized computations.</p>\n<p>Distributed computation uses realtime queries to peers for trust information.\nCentralized/localized computation aggregates information at a node, and then computes across that aggregated information.</p>\n<p>Both Google and SecureScuttlebutt qualify as centralized/localized.\nThe difference is that Google tries to obtain global knowledge of the network, via crawling, while SSB obtains a localized neighborhood of the network.</p>\n<p>The community is encouraged to supplement SecureScuttlebutt&#39;s localized computation with distributed protocols, but it&#39;s not currently expected that SSB core will include any distributed computation systems itsemf, due to the scope creep that would create.</p>\n<hr>\n<p>It may be possible to generalize a universal system for ranking the trust and quality of data in SecureScuttlebutt.\nIf so, then a single &quot;ranking&quot; application would be able to publish and review data structures.\nHowever, I&#39;m unsure that&#39;s possible.\nIn the near-term, I suggest we study applications and data-structures separately, and watch for unifying principles.</p>\n<p>There are a few applications which I think we should focus our attention on, because they&#39;ll yield the most insight, and value, to the network.</p>\n<ul>\n<li>An intelligent crawler which expands on the user&#39;s follow relationships. This application would start with the user&#39;s explicit follows, and then analyze the network to find feeds, messages, and blobs that are worth downloading. This might be viewed as attempting to automate virality. The algorithm will need to balance its options against available disk space.</li>\n<li>A search engine for messages, feeds, and blobs. This is a very broad application, and so may be hard to address early, but it will have a lot of relevance, insight, and value for the network. It also makes a strong companion to the intelligent crawler, as it lets you discover what the crawler has fetched for you. And, the queries may act as inputs to the crawler, since queries signal your interests.</li>\n<li>A whois application. Without name authorities, naming becomes a kind of search that must produce only one result. Challenging, but possibly rewarding.</li>\n</ul>\n<p>-Paul F</p>\n","faq/applications/applications.md":"<h1 id=\"applications\">Applications</h1>\n<p><em>Questions around the different ssb-apps and how they work</em></p>\n<hr>\n<ul>\n<li><a href=\"patchwork-and-patchbay.md\">If I am on Patchwork, can I see what my friends post on Patchbay?</a></li>\n<li><a href=\"moving-ssb-apps.md\">If I decide to move from one Scuttlebutt app to another, can I keep my feed and history?    </a></li>\n<li><a href=\"multiple-devices.md\">Can I use scuttlebutt on different devices, but maintain the same identity? (For example:    updating my Patchwork feed from my home or  work computer?)</a></li>\n<li><a href=\"patchwork-markup.md\">Is there a markdown guide for Patchwork?</a></li>\n</ul>\n","faq/applications/moving-ssb-apps.md":"<h1 id=\"can-i-switch-apps-easily-\">Can I switch apps easily?</h1>\n<p><em>If I decide to move from one Scuttlebutt app to another, can I keep my feed and history?</em></p>\n<hr>\n<p>Yep! If you use the same private key (found at .ssb/secret).  This is a short answer...but there&#39;s not much else to say.  Scuttlebutt is simple and cool that way.</p>\n<hr>\n<p><strong>Sources</strong></p>\n<ul>\n<li>The answer is taken from <a href=\"https://viewer.scuttlebot.io/%25m8%2B25i3i5LCRioA%2FCAqARVb0HNA6TTdvi4B0CxBd8eo%3D.sha256\">this thread.</a>  Shoutout to @ralphtheninja for the awesome answer.</li>\n</ul>\n","faq/applications/multiple-devices.md":"<h1 id=\"can-i-post-from-different-devices-\">Can I post from different devices?</h1>\n<p><em>Or rather: can I use scuttlebutt on different devices, but maintain the same identity? For example: updating my Patchwork feed from my home and  work computer?</em></p>\n<hr>\n<p>Currently, you cannot.  Identities are tied to a single user on a single device.  You could use scuttlebutt on multiple devices, but you would be maintaining multiple identities and feeds.</p>\n<p>There is an ongoing conversation around this, though, that you can follow <a href=\"https://viewer.scuttlebot.io/%25PwYjgBO4qwpz4ya%2BFLiXphHyuwdFHntrMGd%2FbXJc17o%3D.sha256\">here</a></p>\n<hr>\n<p><strong>Sources</strong></p>\n<ul>\n<li>Answer taken from the continuing discussion posted above.  Shoutos to @feliciousX for getting this particular discussions started, and too many scuttlebutts to name who are continuing to figure this out.</li>\n</ul>\n","faq/applications/patchwork-and-patchbay.md":"<h1 id=\"how-do-posts-work-across-apps-\">How do posts work across apps?</h1>\n<p><em>If I am on Patchwork, can I read messages my friends post on Patchbay?</em></p>\n<hr>\n<p>Generally yes, but it depends on the type of message.</p>\n<p>Everything you do through SSB is considered a message, but there are different types of messages you can send.  So making a friend, adding a display picture, or posting your recipe on baked beans are all messages; each of a different type.  As SSB grows, so will the breadth of messages it is capable of sharing.  Today you can use SSB to not only send status updates, but also update code through git pull requests, or upload and share songs.</p>\n<p>However, different applications will have different <em>opinions</em> on what types of messages it can send and receive. For example:  Patchwork, as the family station wagon, is concerned with general posts, display images, profiles, and friends.  It doesn&#39;t track any pull requests sent through git-ssb.  Patchbay, on the other hand, is a pickup truck built for utility and so handles everything Patchwork can handle plus git messages and more.</p>\n<p>What this means is that if you are on Patchwork and your friend is on Patchbay, and your friend posts their opinion on John Wick 2, you will be able to see it.  But if your friend makes a pull request to update the code on their John Wick 2 dating sim, you would not be able to see it because Patchwork has no opinion on that type of message. </p>\n<hr>\n<p><strong>Sources</strong></p>\n<ul>\n<li>The answer is compiled from multiple posts from <a href=\"https://viewer.scuttlebot.io/%25m8%2B25i3i5LCRioA%2FCAqARVb0HNA6TTdvi4B0CxBd8eo%3D.sha256\">this thread.</a>  Shoutout to @ralphtheninja for the awesome answer.</li>\n</ul>\n","faq/applications/patchwork-markup.md":"<h1 id=\"is-there-a-list-of-possible-markdown-for-patchwork-\">Is there a list of possible markdown for Patchwork?</h1>\n<p><em>Patchwork messages can be written with markdown, but what specific flavor or dialect of markdown?  I want a style guide!</em></p>\n<hr>\n<p>Here you go!</p>\n<pre><code>***\nEmphasis, aka italics, with *asterisks* or _underscores_.\n\nStrong emphasis, aka bold, with **asterisks** or __underscores__.\n\nCombined emphasis with **asterisks and _underscores_**.\n\nStrikethrough uses two tildes. ~~Scratch this.~~\n\n1. First ordered list item\n2. Another item\n  * Unordered sub-list. \n1. Actual numbers don&#39;t matter, just that it&#39;s a number\n   1. Ordered sub-list\n4. And another item.  \n\n   Some text that should be aligned with the above item.\n\n* Unordered list can use asterisks\n- Or minuses\n+ Or pluses\n\n[I&#39;m an inline-style link](https://www.google.com)\n\n[I&#39;m a reference-style link][Arbitrary case-insensitive reference text]\n\n[You can use numbers for reference-style link definitions][1]\n\nOr leave it empty and use the [link text itself]\n\nURLs and URLs in angle brackets will automatically get turned into links. \nhttp://www.example.com or &lt;http://www.example.com&gt; and sometimes \nexample.com (but not on Github, for example).\n\nSome text to show that the reference links can follow later.\n\narbitrary case-insensitive reference text]: https://www.mozilla.org\n[1]: http://slashdot.org\n[link text itself]: http://www.reddit.com\n</code></pre><p>The above yields:</p>\n<p>Emphasis, aka italics, with <em>asterisks</em> or <em>underscores</em>.</p>\n<p>Strong emphasis, aka bold, with <strong>asterisks</strong> or <strong>underscores</strong>.</p>\n<p>Combined emphasis with <strong>asterisks and <em>underscores</em></strong>.</p>\n<p>Strikethrough uses two tildes. <del>Scratch this.</del></p>\n<ol>\n<li>First ordered list item</li>\n<li>Another item<ul>\n<li>Unordered sub-list. </li>\n</ul>\n</li>\n<li>Actual numbers don&#39;t matter, just that it&#39;s a number<ol>\n<li>Ordered sub-list</li>\n</ol>\n</li>\n<li><p>And another item.  </p>\n<p>Some text that should be aligned with the above item.</p>\n</li>\n<li><p>Unordered list can use asterisks</p>\n</li>\n<li>Or minuses</li>\n<li>Or pluses</li>\n</ol>\n<p><a href=\"https://www.google.com\">I&#39;m an inline-style link</a></p>\n<p><a href=\"https://www.mozilla.org\">I&#39;m a reference-style link</a></p>\n<p><a href=\"http://slashdot.org\">You can use numbers for reference-style link definitions</a></p>\n<p>Or leave it empty and use the <a href=\"http://www.reddit.com\">link text itself</a></p>\n<p>URLs and URLs in angle brackets will automatically get turned into links. \n<a href=\"http://www.example.com\">http://www.example.com</a> or <a href=\"http://www.example.com\">http://www.example.com</a> and sometimes \nexample.com (but not on Github, for example).</p>\n<p>Some text to show that the reference links can follow later.</p>\n<hr>\n<p><em>Sources</em></p>\n<p>This answer was taken almost verbatim from @nanomonkey&#39;s fantastic answer on Patchwork.</p>\n","faq/basics/basics.md":"<h1 id=\"basics\">Basics</h1>\n<p><em>Questions about scuttlebutt in general, and confusions that come up when folks first get started.</em></p>\n<hr>\n<ul>\n<li><a href=\"patchwork-vs-scuttlebutt.md\">What is the difference between Patchwork and Scuttlebutt?</a></li>\n<li><a href=\"pub.md\">What is a pub?</a></li>\n<li><a href=\"multiple-pubs.md\">Should I follow multiple pubs?</a></li>\n<li><a href=\"gossip.md\">What do you mean when you say SSB works with Gossip?</a></li>\n<li><a href=\"data-live.md\">Where does all my data live?</a></li>\n<li><a href=\"size.md\">How much space will scuttlebutt take up on my computer?</a></li>\n<li><a href=\"delete.md\">What happens if I unfollowed all my friends and deleted  my .ssb folder? Would all my   messages disappear from the scuttleverse?</a></li>\n</ul>\n","faq/basics/data-live.md":"<h1 id=\"where-does-all-my-data-live-\">Where does all my data live?</h1>\n<hr>\n<p>It lives on your computer, your friends computers, and your friends&#39; friends computers.</p>\n<p> When you connect to a friend over an application like Patchwork, you are syncing the diaries that live on your computers, and making sure they hold the same relevant information. This helps explain how no internet connection is needed: as long as there is <em>any</em> way for your two computers to talk to each other, you can catch up on each other&#39;s feed.</p>\n<p> On your computer, your diary lives as a hidden directory within your home directory. You can find it by opening up your terminal and, from the home directory, typing in <code>ls -a</code>. The scuttlebutt directory is called <code>.ssb.</code></p>\n<p>The messages you&#39;ve sent live in a leveldb database within this folder (specifically at <code>.ssb/db</code>.  They are stored in binary form and so are pure gibberish if you try to read them directly from that folder.     </p>\n<p><strong>Additional Resources</strong></p>\n<ul>\n<li>If the command line and terminals are new to you, here is a great in-depth introduction:\n<a href=\"https://www.bartbusschots.ie/s/blog/taming-the-terminal/\">Taming the Terminal</a></li>\n</ul>\n<p><strong>Sources</strong></p>\n<ul>\n<li>Answer compiled mostly from experience and <a href=\"https://viewer.scuttlebot.io/%25bUEQtn85jtL8Vxjup4sS%2F7wcaswS4fThUPVH7G5IvjU%3D.sha256\">this thread.</a>  Shoutouts to @cryptix for the answer on encryption and the leveldb database.</li>\n</ul>\n","faq/basics/delete.md":"<h1 id=\"what-happens-if-i-delete-everything-\">What happens if I delete everything?</h1>\n<p><em>What happens if I unfollow all my friends and delete my .ssb folder? Will all my           messages disappear from the scuttleverse?</em></p>\n<hr>\n<p>Your feed would be deleted off of your computer, but would remain on your friends&#39;(and friends of friends)  computers.  Your messages would remain as long as your friends remained connected, but they might be harder to find in the future as the network grows.</p>\n<p>In this, again, it is similar to real-life social relationships.  If you decide one day  to ditch all your friends and move away...it doesn&#39;t mean these friends will forget about you.  And they may still talk about that one time you screamsang Carly Rae Jepsen at karaoke.  But as life continues, and you all make new friends and connections and live new stories, that specific memory may become harder to recall.</p>\n<hr>\n<p><strong>Sources</strong></p>\n<ul>\n<li>Answer compiled from <a href=\"https://viewer.scuttlebot.io/%259tfp%2F8bCful8ZvMskklXYO6C%2F7%2FgIaBKH9jNwJI6%2BTM%3D.sha256\">this thread.</a> Shoutouts to @claytonkoenig for asking the question, and to @ezdiy and @keks for their answers.</li>\n</ul>\n","faq/basics/gossip.md":"<h1 id=\"what-do-you-mean-when-you-say-ssb-works-with-gossip-\">What do you mean when you say SSB works with Gossip?</h1>\n<p><em>Is gossip some esoteric computer science protocol, or do you mean like real-life gossip?</em></p>\n<hr>\n<p>Both!</p>\n<p>Part of the philosophy behind Scuttlebutt is that software should better represent how humans actually relate. The connections between humans should map approximately to the connection between their computers. In other words, the architecture beneath everything is inspired by actual human behavior, and is built to function like human behavior.</p>\n<p>There are some great pages posted on scuttlebutt.nz that go into gossip as a protocol,<a href=\"https://www.scuttlebutt.nz/concepts/gossip.html\">found here</a>. But gossip as a concept-- you meet to talk to your friends about your mutual friends and catch up on what everyone&#39;s been up to and saying-- serves as a great summary of how scuttlebutt functions.</p>\n<hr>\n<p><strong>Sources</strong></p>\n<ul>\n<li>Answer taken from section of <a href=\"https://viewer.scuttlebot.io/%25m8%2B25i3i5LCRioA%2FCAqARVb0HNA6TTdvi4B0CxBd8eo%3D.sha256\">this thread.</a> Shoutouts to @ferrouswheel for asking the question! </li>\n</ul>\n","faq/basics/multiple-pubs.md":"<h1 id=\"should-i-follow-multiple-pubs-\">Should I follow multiple pubs?</h1>\n<p><em>Is it worth it to follow(befriend/subscribe to)  more than one Pub server? Are all the pub servers synced to each other?</em></p>\n<hr>\n<p><em>(For this, we can quote verbatim @winmix&#39;s answer from the scuttleverse</em></p>\n<p>Many of the pubs sync each other.</p>\n<p>note that it&#39;s all built on follows. Using an invite to a pub makes you follow the pub (and the people it follows) and that  makes it follow you. Following = intention to replicate that persons data where-ever you find it (you find that data via other people via gossip).</p>\n<p>following more pubs = finding out about more people\ngetting more pubs to follow you = more always-online nodes that for-sure replicate your messages</p>\n<hr>\n<p><em>Sources</em></p>\n<p>Thanks to @Ds for asking the question and @winmix for the answer!</p>\n","faq/basics/patchwork-vs-scuttlebutt.md":"<h1 id=\"what-is-the-difference-between-patchwork-and-scuttlebutt-\">What Is the Difference Between Patchwork and Scuttlebutt?</h1>\n<p><em>And what is patchbay, and ssb, and every other mysterious term I&#39;ve been hearing?</em></p>\n<hr>\n<p><strong>Scuttlebutt</strong> is the general idea or concept around all of this.  It&#39;s definition is loose, and is often just meant to refer to this entire <em>thing</em>, in the way someone refers to &quot;the internet&quot; or &quot;this afternoon&quot;.  In this case, the <em>thing</em> is the idea of a network organized similar to an actual social graph, which communicates messages in a way similar to gossip.</p>\n<p><strong>SSB</strong> stands for SecureScuttleButt.  It is the protocol through which we can exchange messages, read each others&#39; feeds, and make friends.  You could compare it to <a href=\"https://en.wikipedia.org/wiki/Transmission_Control_Protocol\">TCP</a>, which is an underlying protocol for how devices connect to one another on the internet.  TCP is a network protocol, though, while SSB is a local protocol.  This means it doesn&#39;t require any sort of  internet connection to work.</p>\n<p><strong>Patchwork</strong>,<strong>Patchbay</strong>, and <strong>Patchfoo</strong> are different applications used to interpret and display the various messages transmitted through SSB.  A rough analogy would be that if SSB was like TCP, then an application like Patchwork would be like a web browser.</p>\n<p>A better analogy for all of this would be that Patchwork is a car you ride in and SecureScuttlebutt is the road you drive on. There are other types of cars that drive on the same road and you can drive a different car to the same place (car = application, road = protocol).</p>\n<ul>\n<li>With this analogy, the current car models for driving on ssb are:<ul>\n<li>Patchwork: family station wagon</li>\n<li>Patchbay: pickup truck</li>\n<li>Patchfoo: jeep</li>\n<li>git-ssb: digger.</li>\n</ul>\n</li>\n</ul>\n<hr>\n<p><strong>Sources</strong></p>\n<ul>\n<li>The answer is compiled from multiple posts from <a href=\"https://viewer.scuttlebot.io/%25m8%2B25i3i5LCRioA%2FCAqARVb0HNA6TTdvi4B0CxBd8eo%3D.sha256\">this thread.</a>  Shoutout to @dominic for the car analogy.</li>\n</ul>\n","faq/basics/pub.md":"<h1 id=\"what-is-a-pub-\">What is a Pub?</h1>\n<p><em>I joined patchwork, but it seemed really empty.  Then I  found out the  best thing to do would be to join a pub.  Are these like servers? Or people? Or drinking clubs?</em></p>\n<hr>\n<p>To best answer this question, we should first explain how Scuttlebutt is designed to work. </p>\n<p>Scuttlebutt works through word of mouth among your friend groups...literally.  With Scuttlebutt, You write things in your diary and then, the next time you are near a friend, share what you&#39;ve written.  This friend then shares your diary entry with all their friends and soon all the  awesome things you wrote has spread  across your social network. This &quot;gossiping&quot; is simple to do if you are physically near a friend, since Scuttlebutt works with just a local router.  If you cannot be physically near, and want to connect over the internet, it could be tremendously hard to find a direct connection to your friend across the vastness of all possible connections.  That is where pubs come in to help.</p>\n<p>Pubs(named after real life pubs, or &quot;public houses&quot;) are a peer you can follow that helps you catch up on the gossip and feed of your network.  They act sort of as both bar and barfly, someone who never leaves the party and makes friends with everyone, and seems to always know the latest gossip.  In (slightly) more technical terms, pubs are servers that have a static IP address, are always online, and always follow you back when you follow them (thus growing their network).  In this way, they can act as a waypoint for you to find the location of your friends and catch up with them.</p>\n<p>When you first get started on Scuttlebutt it can appear incredibly empty until you &quot;join&quot; a pub.  You can find a list of pubs to join <a href=\"https://github.com/ssbc/scuttlebot/wiki/Pub-Servers\">here</a>.  Though it is important to note that you aren&#39;t joining a server, you&#39;re more making a connection with a person that is also a place and is also neither.  And metaphors are hard.</p>\n<p>This concept of pubs is one of the densest and most complex with Scuttlebutt. You can read more about it <a href=\"https://www.scuttlebutt.nz/concepts/pub.html\">here</a> and <a href=\"https://www.scuttlebutt.nz/stories/design-challenge-avoid-centralization-and-singletons.html\">here</a>.  Or just not worry about it too much right now and simply  know: while pubs are not required to use scuttleverse they certainly make it simpler. Just like in real life, when you are new to the area, a pub is a great way to meet new friends.</p>\n<hr>\n<p><strong>Sources</strong></p>\n<ul>\n<li><a href=\"https://viewer.scuttlebot.io/%25lxUClUyoEVHQ0OIRq2uslFPcPJeJ2UmPROKdl996RFU%3D.sha256\">_Answer compiled mostly from this thread. Shoutouts to @mixmix for the original answer.</a></li>\n</ul>\n","faq/basics/size.md":"<h1 id=\"how-much-space-will-scuttlebutt-take-up-on-my-computer-\">How much space will scuttlebutt take up on my computer?</h1>\n<hr>\n<p>This depends on how long you&#39;ve been on scuttlebutt, how many friends you have, and how many high-quality kitten pics you send each other.</p>\n<p>Since you are holding the entire, evergrowing log of your friend network, it could grow rather large over time.  The biggest storage space would be in your blobs folder, since that is holding all the attachments(kitten pics) sent to one another.   </p>\n<p>For a better example of size, we can look at two users&#39; .ssb folders: @keks and @cryptix.</p>\n<p>Here is @keks folder:</p>\n<pre><code>2.5G  ~/.ssb/blobs\n7.5K  ~/.ssb/blobs_push\n512 ~/.ssb/config\n125M  ~/.ssb/db\n272M  ~/.ssb/fulltext0\n512 ~/.ssb/gossip.json\n20M ~/.ssb/links\n1.5K  ~/.ssb/manifest.json\n122M  ~/.ssb/media\n60M ~/.ssb/node_modules\n7.9M  ~/.ssb/query\n1.0K  ~/.ssb/secret`\n</code></pre><p>And here is @cryptix&#39;s:</p>\n<pre><code>32K   ./blobs_push\n9.5M  ./query\n28M   ./links\n172M  ./node_modules\n195M  ./db\n317M  ./fulltext0\n1.2G  ./blobs\n1.9G .\n</code></pre><p>In both cases, blobs take up significant space.  If this is a concern, you can delete the blobs folder.  Patchwork will fetch any blobs needed the next time you log on--assuming they still live in the folders of your friends.  If you are the last person to have held onto the blob with the image of a cat falling asleep inside a cereal box, and then you delete that blob folder...that image is gone from the scuttleverse.  All you have now are the memories (though let&#39;s be honest, you&#39;ve probably saved that picture somewhere else cos it sounds incredible.)</p>\n<hr>\n<p><strong>Sources</strong></p>\n<ul>\n<li>Answer compiled from <a href=\"https://viewer.scuttlebot.io/%25bUEQtn85jtL8Vxjup4sS%2F7wcaswS4fThUPVH7G5IvjU%3D.sha256\">this thread</a> and <a href=\"https://viewer.scuttlebot.io/%25Ayi7UUbJnIZ12S%2FgbHof60oHBlmjdrv7TUyFCq5cOTQ%3D.sha256\">this thread</a>  Shoutouts to @cryptix and @keks for awesome answers.</li>\n</ul>\n","faq/channels/channel-find.md":"<h1 id=\"how-do-i-find-a-channel-\">How do I find a channel?</h1>\n<p><em>And if it doesn&#39;t exist, how do I start it?</em></p>\n<hr>\n<p>If you are using Patchwork: You can click onto the search bar in the top right, type <code>#</code> then the channel name.  If the channel does not yet exist within your friend network, then you can start it yourself!</p>\n<hr>\n<p><strong>Sources</strong></p>\n<ul>\n<li>Personal Experience!</li>\n</ul>\n","faq/channels/channel-messages.md":"<h1 id=\"how-do-channel-subscriptions-work-\">How do channel subscriptions work?</h1>\n<p><em>If I subscribe to a channel would I see messages from whoever wrote in that channel?</em></p>\n<hr>\n<p>You would see channel messages within your social network: so those of your friends and friends of friends.  You would <em>not</em> see messages from folks outside of your network, even though they may be posting something using the same channel designation. </p>\n<p>You <em>would</em> see those messages if you later became friends (which is likely, since you share the same interests!)</p>\n<hr>\n<p><strong>Sources</strong></p>\n<ul>\n<li>Answer taken from <a href=\"https://viewer.scuttlebot.io/%256Jajc1TsINMv6%2FUMSEHThi0uTcHIbdluzyOVORsZkr8%3D.sha256\">this thread</a></li>\n</ul>\n","faq/channels/channel-sort.md":"<h1 id=\"how-are-channels-sorted-\">How are channels sorted?</h1>\n<p><em>They seem to be listed randomly when I search.  Is there any rhyme or reason to this?</em></p>\n<hr>\n<p>There is!</p>\n<p>They are sorted by recent activity, favoring subscribed channels first.</p>\n<hr>\n<p><strong>Sources</strong></p>\n<ul>\n<li>Answer taken basically straight up from <a href=\"https://viewer.scuttlebot.io/%25grj55XZxFnuMf%2BUqeQaZHC2RXRQcck%2FWzl1L1FeXP1o%3D.sha256\">this thread</a>.  Shoutouts to @Alanna for asking and @Jeremy for answering!</li>\n</ul>\n","faq/channels/channel-start.md":"<hr>\n<p>related:</p>\n<ul>\n<li>channels.md</li>\n<li>channel-sort.md</li>\n<li>channel-find.md</li>\n<li>channel-start.md</li>\n</ul>\n<hr>\n<p>If you are using Patchwork: You can click onto the search bar in the top right, type <code>#</code> then the channel name.  If the channel does not yet exist within your friend network, then you can start it yourself!</p>\n<hr>\n<p><strong>Sources</strong></p>\n<ul>\n<li>Personal Experience!</li>\n</ul>\n","faq/channels/channels-index.md":"<h1 id=\"channels\">Channels</h1>\n<p><em>All the questions around the channels feature in the scuttleverse, and what it&#39;s meant to do.</em></p>\n<hr>\n<ul>\n<li><a href=\"channels.md\">What are channels and how do they work?</a></li>\n<li><a href=\"channel-sort.md\">Are Channels sorted in any order?</a></li>\n<li><a href=\"channel-messages.md\">If I subscribe to a channel would I see messages from whoever wrote in that channel?</a></li>\n<li><a href=\"channel-find.md\">How do I find a channel?</a></li>\n</ul>\n","faq/channels/channels.md":"<h1 id=\"what-are-channels-\">What Are channels?</h1>\n<p><em>And also: how do they work?</em></p>\n<hr>\n<p>Channels are a way to organize your messages and conversations, but offer no additional functionality (that&#39;s not already part of scuttlebutt). </p>\n<p> Subscribing to a channel will let you read messages from your friends (and friends of friends) who have written in this channel.  You will not, however,  see any channel messages from folks not in your network.  You do not need to subscribe to a channel to see a message a friend posts to it.  You will see it on your main feed simply cos they&#39;re a friend and you&#39;re interested, on a technical(and emotional!) level, in what they have to say. </p>\n<p>An analogy! If scuttlebutt works as a big diary--with each message you post added to the end of your diary and shared with your friends-- then channels are like writing a diary entry with a different colored pen.  They are simply a pleasing,  personal form of organization.  But  luckily your friends follow this same technique and use the same pens and so you can easily share your related messages.</p>\n<p>There has been discussion on whether channels should work more like hashtags, and to have a distinct &quot;group&quot; feature that would behave closer to a slack channel or discussion group.  You can read more of that conversation <a href=\"https://viewer.scuttlebot.io/%25gTHLf3Rlc48RSjwATVDJZpe9VlWGfxMmio1%2Bo3KXvjA%3D.sha256\">here</a></p>\n<hr>\n<p><strong>Sources</strong></p>\n<ul>\n<li>Answer compiled from multiple posts on <a href=\"https://viewer.scuttlebot.io/%256Jajc1TsINMv6%2FUMSEHThi0uTcHIbdluzyOVORsZkr8%3D.sha256\">this thread</a> Shoutouts to @kas, @dinosaur, and @dominic for the help!</li>\n</ul>\n","faq/misc/concepts.md":"<h1 id=\"concepts\">Concepts</h1>\n<p><em>Miscellaneous questions around the <em>ideas</em> behind Scuttlebutt and the scuttleverse.  Also questions around the FAQ itself.</em></p>\n<hr>\n<ul>\n<li><a href=\"cool.md\">All of this seems really cool?</a></li>\n<li><a href=\"faq-credits.md\">Who is writing this FAQ?</a></li>\n<li><a href=\"help.md\">How can I help?</a></li>\n</ul>\n","faq/misc/cool.md":"<h1 id=\"this-seems-really-cool-\">This seems really cool?</h1>\n<hr>\n<p>It is really cool!</p>\n","faq/misc/faq-credits.md":"<h1 id=\"who-wrote-this-faq-\">Who wrote this FAQ?</h1>\n<p><em>And where are they getting their answers?</em></p>\n<hr>\n<p>This FAQ was originally started by Zach. He was helped by his entire scuttle network.  Much of the responses were taken from replies on scuttlebutt and have been credited as such in the source section of the answers.</p>\n<p>The FAQ, ideally, will have many contributors.  One of the contributors could be you, and so it&#39;s fair to say this FAQ was probably also written by future you. </p>\n<hr>\n<p><strong>Sources</strong></p>\n<ul>\n<li>You and me.  Us!</li>\n</ul>\n","faq/misc/help.md":"<h1 id=\"how-can-i-help-\">How can I help?</h1>\n<p><em>I want to get involved with this FAQ because I am awesome!</em></p>\n<hr>\n<p>You can help with the FAQ by asking a question, refining one of my answers, or submitting an entire question and answer.</p>\n<p>I am using gitbook to assemble this all, and so to help with any of the above simply submit a change request on the gitbook page, found <a href=\"https://www.gitbook.com/book/nelsonian/ssb-faq/edit#/edit/master/README.md?_k=4k2qxt\">here</a></p>\n<p>If that does not work, you can reach me through scuttlebutt.  My scuttlename is @ZqH7Mctu/7DNInxuwl12ECjfrAKUX2tBLq1rOldNhg0=.ed25519.  (caveat: searching by this will only work if we are in the same friend network.  But we prolly are.  I&#39;m pretty social and this place is still small.)</p>\n<p>I love any help you want to give, with one caveat: This FAQ is intended as a sort of &quot;on-ramp&quot; to the scuttleverse, and so meant to be simple.  I would love to have links to deeper and more technical resources, but this should not be seen as a FAQ for the highly technical stuff (so no questions about how to make an SSB app  with just tin cans, a hacked talkboy, and a cursory knowledge of LISP.)\n<em>(Though as I write this I realize that answer would be super cool and so I urge you to start up an advanced FAQ if you&#39;re able.)</em></p>\n<hr>\n<p><strong>Sources</strong></p>\n<ul>\n<li>My heart&#39;s wants.</li>\n</ul>\n","faq/misc/resources.md":"<h1 id=\"what-are-some-good-resources-\">What are some good resources?</h1>\n<p><em>I want to learn more about the history of scuttlebutt, and the concepts that are beneath it.</em></p>\n<hr>\n<p><a href=\"http://scuttlebutt.nz\">Scuttlebutt.nz</a> has some fantastic resources for this.  I would recommend the sections <a href=\"https://www.scuttlebutt.nz/talks.html\">Talks</a>, <a href=\"https://www.scuttlebutt.nz/concepts/\">Concepts</a>, and <a href=\"https://www.scuttlebutt.nz/stories/\">Stories</a></p>\n<hr>\n<p><strong>Sources</strong></p>\n<ul>\n<li>My honest, personal opinion</li>\n</ul>\n"}
